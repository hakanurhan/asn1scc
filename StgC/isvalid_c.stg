group c_isvalid;


getStringSize(p) ::= "strlen(<p>)"


Print_AlphabetCheckFunc_str(p) ::= "<p>[i]"

JoinTwo(sStr1,sStr2) ::=<<
<sStr1>
<sStr2>
>>

JoinTwoIfFirstOk(sStr1,sStr2) ::=<<
<sStr1>
if (ret) {
    <sStr2>
}   /*COVERAGE_IGNORE*/
>>


always_true_statement ()::= <<
ret = TRUE;
>>

always_false_statement(sErrorCodeName)::= <<
ret = FALSE;                        /*COVERAGE_IGNORE*/
*pErrCode = <sErrorCodeName>;       /*COVERAGE_IGNORE*/
>>
 

makeExpressionToStatement0(sIsValidExp) ::= <<
ret = <sIsValidExp>;
>>

convertVCBExpressionToStatementAndUpdateErrCode(sIsValidExp, sErrCode) ::= <<
ret = <sIsValidExp>; 
*pErrCode = ret ? 0 :  <sErrCode>; 
>>

convertVCBStatementToStatementAndUpdateErrCode(sStatement, sErrCode) ::= <<
<sStatement>
*pErrCode = ret ? 0 :  <sErrCode>; 
>>

convertVCBTRUEToStatementAndUpdateErrCode() ::= <<
ret = TRUE;
*pErrCode = 0;
>>
convertVCBFalseToStatementAndUpdateErrCode(sErrCode) ::= <<
ret = FALSE;
*pErrCode = <sErrCode>;
>>


/*
*****************************************************************************************
 C H E C K   C O N S T R A I N T S      F U N C T I O N S
*****************************************************************************************
*/
PrintErrorCode(sErrorName, nErrCode, sComment) ::= <<
#define <sErrorName>		<nErrCode>  /*<sComment>*/
>>


EmitTypeAssignment_primitive_def(sVarName, sStar, sFuncName, sTypeDefName, sErrCode, nErrValue) ::= <<
#define <sErrCode>		<nErrValue>  /**/
flag <sFuncName>(const <sTypeDefName><sStar> <sVarName>, int* pErrCode);
>>

EmitTypeAssignment_primitive(sVarName, sStar, sFuncName, sTypeDefName, sContent, arrsAlphaFuncs) ::= <<
<arrsAlphaFuncs; separator="\n">
flag <sFuncName>(const <sTypeDefName><sStar> <sVarName>, int* pErrCode)
{
    flag ret = TRUE;
	(void)<sVarName>;
	
    <sContent>

	return ret;
}
>>


EmitTypeAssignment_oct_or_bit_string_def(sVarName, sStar, sFuncName, sTypeDefName, sErrCode, nErrValue) ::= <<
#define <sErrCode>		<nErrValue>  /**/
flag <sFuncName>(const <sTypeDefName><sStar> <sVarName>, int* pErrCode);
>>

EmitTypeAssignment_oct_or_bit_string(sVarName, sStar, sFuncName, sTypeDefName, sContent, arrsAlphaFuncs) ::= <<
<arrsAlphaFuncs; separator="\n">
flag <sFuncName>(const <sTypeDefName><sStar> <sVarName>, int* pErrCode)
{
    flag ret = TRUE;
	(void)<sVarName>;
	
    <sContent>

	return ret;
}
>>



EmitTypeAssignment_composite_def_err_code(sErrCode, nErrValue) ::= <<
#define <sErrCode>		<nErrValue>  /**/
>>
EmitTypeAssignment_composite_def(sVarName, sStar, sFuncName, sTypeDefName, arrsErrcodes) ::= <<
<arrsErrcodes; separator="\n">
flag <sFuncName>(const <sTypeDefName><sStar> <sVarName>, int* pErrCode);
>>



EmitTypeAssignment_composite(sVarName, sStar, sFuncName, sTypeDefName, sContent, arrsAlphaFuncs, arrsLocalVars) ::= <<
<arrsAlphaFuncs; separator="\n">
flag <sFuncName>(const <sTypeDefName><sStar> <sVarName>, int* pErrCode)
{
    flag ret = TRUE;
    <arrsLocalVars; separator="\n">
	(void)<sVarName>;
	
    <sContent>

	return ret;
}
>>




ExpEqual(sExp1, sExp2) ::= "(<sExp1> == <sExp2>)"
ExpStringEqual(sExp1, sExp2) ::= "(strcmp(<sExp1>,<sExp2>)  == 0)"
ExpGt(sExp1, sExp2) ::= "(<sExp1> \> <sExp2>)"
ExpGte(sExp1, sExp2) ::= "(<sExp1> \>= <sExp2>)"
ExpLt(sExp1, sExp2) ::= "(<sExp1> \< <sExp2>)"
ExpLte(sExp1, sExp2) ::= "(<sExp1> \<= <sExp2>)"
ExpOr(sExp1, sExp2) ::= "((<sExp1>) || (<sExp2>))"
ExpAnd(sExp1, sExp2) ::= "(<sExp1> && <sExp2>)"
ExpAndMulit(arrsExp) ::= <<
<arrsExp; separator=" && ">
>>
ExpNot(sExp) ::= "(!<sExp>)"
StrLen(sExp) ::= "strlen(<sExp>)"
ArrayLen(sExp, sAcc) ::= "<sExp><sAcc>nCount"


ExpressionToStament(sExp1) ::=<<
ret = <sExp1>;
>>

StatementOrStament(sStat1, sStat2) ::= <<
<sStat1>
if (!ret) {
    <sStat2>
}
>>


ExpressionOrStament(sExp1, sStat2) ::= <<
ret = <sExp1>; 
if (!ret) {
    <sStat2>
}
>>

StatementOrExpression(sStat1, sExp2) ::= <<
<sStat1>
if (!ret) {
    ret = <sExp2>;
}
>>

StatementAndStament(sStat1, sStat2) ::= <<
<sStat1>
if (ret) {
    <sStat2>
}
>>

ExpressionAndStament(sExp1, sStat2) ::= <<
ret = <sExp1>;
if (ret) {
    <sStat2>
}
>>

StatementAndExpression(sStat1, sExp2) ::= <<
<sStat1>
if (ret) {
    ret = <sExp2>;
}
>>

StatementNot(sStat) ::= <<
<sStat>
ret = !ret;
>>

StatementExceptStament(sStat1, sStat2) ::= <<
<sStat1>
if (ret) {
    <sStat2>
    ret = !ret;
}
>>

ExpressionExceptStament(sExp1, sStat2) ::= <<
ret = <sExp1>;
if (ret) {
    <sStat2>
    ret = !ret;
}
>>

StatementExceptExpression(sStat1, sExp2) ::= <<
<sStat1>;
if (ret) {
    ret = !(<sExp2>);
}
>>

StatementForLoop(p, sAcc, i, bIsFixedSize, nFixedSize, sInnerStatement) ::= <<
for(<i> = 0; ret && <i> \< <if(!bIsFixedSize)><p><sAcc>nCount<else><nFixedSize><endif>; <i>++) 
{
	<sInnerStatement>
}
>>



Print_AlphabetCheckFunc(sFuncName, arrsAlphaConBody) ::= <<
flag <sFuncName>(const char* str) 
{
    flag ret=TRUE;
    int i=0;

    while ((str[i] != '\0') && ret) {
        ret = ret && (<arrsAlphaConBody; separator=" && ">);
        i = i + 1;
    }
    return ret;
}
>>



SingleValContraint(p, v) ::= "(<p> == <v>)"

SingleValContraint_bitString_fixedSize(p1, p2, nFixedSize) ::= <<
((memcmp(<p1>arr, <p2>.arr, <nFixedSize>/8) == 0) && ((<nFixedSize> % 8) >0 ? (<p1>arr[<nFixedSize>/8]\>>(8-<nFixedSize> % 8) == <p2>.arr[<nFixedSize>/8]\>>(8-<nFixedSize> % 8) ) : TRUE))
>>

SingleValContraint_bitString_varSize(p1, p2) ::= <<
(((<p1>nCount == <p2>.nCount) && (memcmp(<p1>arr, <p2>.arr, <p1>nCount/8) == 0)) && (<p1>nCount % 8 > 0 ? (<p1>arr[<p1>nCount/8] \>> (8-<p1>nCount % 8) == <p2>.arr[<p1>nCount/8]\>>(8-<p1>nCount % 8) ) : TRUE))
>>


SingleValContraint_octetString_fixedSize(p1, p2, nFixedSize) ::= <<
(memcmp(<p1>arr, <p2>.arr, <nFixedSize>) ==0)
>>

SingleValContraint_octetString_varSize(p1, p2) ::= <<
((<p1>nCount == <p2>.nCount) && (memcmp(<p1>arr, <p2>.arr, <p1>nCount) ==0))
>>


stringContainsChar(sStrVal, p) ::= "strchr(<sStrVal>, <p>)"

RangeContraint(p, v1, v2, bMin, bMax) ::= "(<v1> \<<if(bMin)>=<endif> <p> && <p> \<<if(bMax)>=<endif> <v2>)"

RangeContraint_val_MAX(p, v, bMin) ::= "(<p> ><if(bMin)>=<endif> <v>)"

RangeContraint_MIN_val(p, v, bMax) ::= "(<p> \<<if(bMax)>=<endif> <v>)"


AND_Constraint(sCon1, sCon2) ::= "(<sCon1> && <sCon2>)"

OR_Constraint(sCon1, sCon2) ::= "(<sCon1> || <sCon2>)"

AllExceptConstraint(sCon)  ::= "(!<sCon>)"

ExceptConstraint(sCon1,sCon2) ::= "(<sCon1> &&  !<sCon2>)"

callAlphaFunc(sFuncName, p) ::= "<sFuncName>_CharsAreValid(<p>)"

PrintMultipleConstraints(arrsConstraints) ::= "<arrsConstraints; separator=\" && \">"


Emit_local_variable_SQF_Index(nI)::="int i<nI>=0;"




Emit_type(arrsConstraints, sErrCodeName) ::= <<
ret = <arrsConstraints; separator=" && ">;
*pErrCode = ret ? 0 : <sErrCodeName>;
>>


call_base_type_func(p, sFuncName) ::= "ret = <sFuncName>(<p>, pErrCode);"

call_base_type_func_exp(p, sFuncName) ::= "<sFuncName>(<p>, pErrCode)"




/* SEQUENCE start*/


Sequence_OptionalChild(p, sAcc,  sChName, sInnerStatement) ::= <<
if (<p><sAcc>exist.<sChName>) {
	<sInnerStatement>
}
>>


Sequence_optional_child_always_present_or_absent(p, sAcc,  sChName, sErrCode, sPresOrAbs) ::= <<
ret= <p><sAcc>exist.<sChName> == <sPresOrAbs>;
*pErrCode = ret ? 0 : <sErrCode>;
>>

Sequence_optional_child_always_present_or_absent_expr(p, sAcc,  sChName, sPresOrAbs) ::= <<
<p><sAcc>exist.<sChName> == <sPresOrAbs>
>>


JoinItems(sPart, sNestedPart) ::= <<
<sPart>
<if(sNestedPart)>
if (ret) {
    <sNestedPart>
}
<endif>
>>

/* SEQUENCE end*/


/* CHOICE start*/

Choice_OptionalChild(p, sAcc,  sChPresent, sInnerStatement) ::= <<
if (<p><sAcc>kind == <sChPresent>) {
	<sInnerStatement>
}
>>

Choice_child_always_present_Exp(p, sAcc, sChPresent) ::= <<
<p><sAcc>kind == <sChPresent>
>>

Choice_child_always_absent_Exp(p, sAcc, sChPresent) ::= <<
<p><sAcc>kind != <sChPresent>
>>

choice_child(sChPresent, sChildBody, bAlwaysAbsent) ::= <<
case <sChPresent> : <if(bAlwaysAbsent)>/*COVERAGE_IGNORE*/<endif>
    <sChildBody>
    break;          <if(bAlwaysAbsent)>/*COVERAGE_IGNORE*/<endif>
>>


choice(p, sAccess, arrsChildren, sErrCodeForInvalidCase) ::= <<
switch (<p><sAccess>kind) {
    <arrsChildren; separator="\n">
    default: /*COVERAGE_IGNORE*/
	    *pErrCode = <sErrCodeForInvalidCase>;      /*COVERAGE_IGNORE*/
	    ret = FALSE;                               /*COVERAGE_IGNORE*/
}
>>

/* CHOICE end*/


Emit_fixedSize_constraint() ::= "ret = TRUE; *pErrCode = 0;"



Emit_sequence_of(sI, sPath, nMax, sSizeConstraint, sChildBody, bFixed) ::= <<
<sSizeConstraint>
<sI> = 0;
while (ret && (<sI>\< <if(bFixed)><nMax><else><sPath>nCount<endif>)) {
    <sChildBody>
    <sI> = <sI>+1;
}
>>



sequenceOf(p,sAcc, i, bIsFixedSize, nFixedSize, soIsValidSizeExp, soErrCode, soInnerStatement) ::= <<
<if(!bIsFixedSize)>
ret = <soIsValidSizeExp>;
*pErrCode = ret ? 0 :  <soErrCode>;

<endif>
<if (soInnerStatement)>
for(<i> = 0; ret && <i> \< <if(!bIsFixedSize)><p><sAcc>nCount<else><nFixedSize><endif>; <i>++) 
{
	<soInnerStatement>
}

<endif>
>>

sequenceOf2(p,sAcc, i, bIsFixedSize, nFixedSize, sInnerStatement) ::= <<
for(<i> = 0; ret && <i> \< <if(!bIsFixedSize)><p><sAcc>nCount<else><nFixedSize><endif>; <i>++) 
{
	<sInnerStatement>
}
>>


octet_var_string_equal(p, sAccess, nVarLength, sOctArrayLiteral )::=<<
OctetString_equal(<p><sAccess>nCount, <nVarLength>, <p><sAccess>arr, <sOctArrayLiteral>)
>>

octet_fix_string_equal(p, sAccess, nFixedSize, nVarLength, sOctArrayLiteral )::=<<
OctetString_equal(<nFixedSize>, <nVarLength>, <p><sAccess>arr, <sOctArrayLiteral>)
>>

bit_var_string_equal(p, sAccess, nVarLength, sOctArrayLiteral, sBitArrayLiteral )::=<<
BitString_equal(<p><sAccess>nCount, <nVarLength>, <p><sAccess>arr, <sOctArrayLiteral>)
>>

bit_fix_string_equal(p, sAccess, nFixedSize, nVarLength, sOctArrayLiteral, sBitArrayLiteral )::=<<
BitString_equal(<nFixedSize>, <nVarLength>, <p><sAccess>arr, <sOctArrayLiteral>)
>>


objId_equal(p, sObjIdLiteral)::=<<
ObjectIdentifier_equal(<p>, &<sObjIdLiteral>)
>>
