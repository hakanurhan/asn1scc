group a_xer;

rtlModuleName() ::= "adaasn1rtl"



EmitTypeAssignment_def_err_code(sErrCode, nErrValue) ::= <<
<sErrCode>:CONSTANT INTEGER := <nErrValue>; 
>>

EmitTypeAssignment_def_encode(sVarName, sStar, sFuncName, sTypeDefName, arrsErrcodes, bEmptyEncodingSpace, nMaxBytesInXER, soSparkAnnotations) ::= <<
<arrsErrcodes; separator="\n">
<sTypeDefName>_REQUIRED_BYTES_FOR_XER_ENCODING:CONSTANT INTEGER := <nMaxBytesInXER>;

SUBTYPE <sTypeDefName>_XER_byte_array_range is Natural range 1..<if(bEmptyEncodingSpace)>1<else><sTypeDefName>_REQUIRED_BYTES_FOR_XER_ENCODING<endif>;
SUBTYPE <sTypeDefName>_XER_byte_array is <rtlModuleName()>.OctetBuffer(<sTypeDefName>_XER_byte_array_range);

subtype <sTypeDefName>_XER_Stream is adaasn1rtl.encoding.xer.CharStream(<if(bEmptyEncodingSpace)>1<else><sTypeDefName>_REQUIRED_BYTES_FOR_XER_ENCODING<endif>);

procedure <sFuncName>(val:in <sTypeDefName>; Stream : OUT <sTypeDefName>_XER_Stream; ret : OUT <rtlModuleName()>.ASN1_RESULT);
procedure <sFuncName>_aux(<sVarName>:in <sTypeDefName>; xmlTag : in <rtlModuleName()>.encoding.xer.XString; bs : in out <rtlModuleName()>.encoding.xer.CharStream; ret : OUT <rtlModuleName()>.ASN1_RESULT)
<soSparkAnnotations>;
>>

EmitTypeAssignment_encode(sTasName, sVarName, sStar, sFuncName, soIValidFuncName, sTypeDefName, arrsLocalVariables, sContent, soSparkAnnotations, sInitilialExp) ::= <<
procedure <sFuncName>_aux(<sVarName>:in <sTypeDefName>; xmlTag : in <rtlModuleName()>.encoding.xer.XString; bs : in out <rtlModuleName()>.encoding.xer.CharStream; ret : OUT <rtlModuleName()>.ASN1_RESULT)
is
    <arrsLocalVariables; separator="\n">
begin
    <if(soIValidFuncName)>
    ret := <soIValidFuncName>(<sVarName>);
    if ret.success THEN
        <sContent>
    end if;
    <else>
    ret := <rtlModuleName()>.ASN1_RESULT'(Success => true, ErrorCode => 0);
    <sContent>
    <endif>
end <sFuncName>_aux;

procedure <sFuncName>(<sVarName>:in <sTypeDefName>; Stream : OUT <sTypeDefName>_XER_Stream; ret : OUT <rtlModuleName()>.ASN1_RESULT)
is
begin
    Stream := <sTypeDefName>_XER_Stream'(N => <if(bEmptyEncodingSpace)>1<else><sTypeDefName>_REQUIRED_BYTES_FOR_XER_ENCODING<endif>,
										 CurrentByte => 1,
										 Data      => (others => Character'Val (0)),
                                         EncodeWhiteSpace => False);
    <sFuncName>_aux(<sVarName>, "<sTasName>", Stream,  ret);
end <sFuncName>;

>>


EmitTypeAssignment_def_decode(sVarName, sStar, sFuncName, sTypeDefName, arrsErrcodes, bEmptyEncodingSpace, nMaxBytesInXER, soSparkAnnotations) ::= <<
<arrsErrcodes; separator="\n">
procedure <sFuncName>(<sVarName>: out <sTypeDefName>; Stream : in out <sTypeDefName>_XER_Stream; ret : OUT <rtlModuleName()>.ASN1_RESULT);
procedure <sFuncName>_aux(<sVarName>: out <sTypeDefName>; xmlTag : in <rtlModuleName()>.encoding.xer.XString; bs : in out <rtlModuleName()>.encoding.xer.CharStream; ret : OUT <rtlModuleName()>.ASN1_RESULT)
<soSparkAnnotations>;
>>



EmitTypeAssignment_decode(sTasName, sVarName, sStar, sFuncName, soIValidFuncName, sTypeDefName, arrsLocalVariables, sContent, soSparkAnnotations, sInitilialExp) ::= <<
pragma Warnings (Off, "unused initial value of ""val""");
procedure <sFuncName>_aux(<sVarName>: out <sTypeDefName>; xmlTag : in <rtlModuleName()>.encoding.xer.XString; bs : in out <rtlModuleName()>.encoding.xer.CharStream; ret : OUT <rtlModuleName()>.ASN1_RESULT)
IS
    <arrsLocalVariables; separator="\n">
begin
    <sContent>
end <sFuncName>_aux;
pragma Warnings (On, "unused initial value of ""val""");

procedure <sFuncName>(<sVarName>: out <sTypeDefName>; Stream : in out <sTypeDefName>_XER_Stream; ret : OUT <rtlModuleName()>.ASN1_RESULT)
is
begin
    <sFuncName>_aux(<sVarName>, "<sTasName>", Stream, ret);
end <sFuncName>;

>>



Integer_encode(p, sTag, nLevel, soCheckExp, sErrCode) ::= <<
adaasn1rtl.encoding.xer.Xer_EncodeInteger(bs, <sTag>, <p>, ret, <nLevel>);
ret.ErrorCode := <sErrCode>;
>>

Integer_decode(p, sTag, nLevel, soCheckExp, sErrCode) ::= <<
adaasn1rtl.encoding.xer.Xer_DecodeInteger(bs, <sTag>, <p>, ret);
<if(soCheckExp)><soCheckExp><endif>
ret.ErrorCode := (if ret.Success then 0 else <sErrCode>);
>>


IntegerPos_encode(p, sTag, nLevel, soCheckExp, sErrCode) ::= <<
adaasn1rtl.encoding.xer.Xer_EncodePosInteger(bs, <sTag>, <p>, ret, <nLevel>);
ret.ErrorCode := <sErrCode>;
>>

IntegerPos_decode(p, sTag, nLevel, soCheckExp, sErrCode) ::= <<
adaasn1rtl.encoding.xer.Xer_DecodePosInteger(bs, <sTag>, <p>, ret);
<if(soCheckExp)><soCheckExp><endif>
ret.ErrorCode := (if ret.Success then 0 else <sErrCode>);
>>


Boolean_encode(p, sTag, nLevel, soCheckExp, sErrCode) ::= <<
adaasn1rtl.encoding.xer.Xer_EncodeBoolean(bs, <sTag>, <p>, ret, <nLevel>);
ret.ErrorCode := <sErrCode>;
>>


Boolean_decode(p, sTag, nLevel, soCheckExp, sErrCode) ::= <<
adaasn1rtl.encoding.xer.Xer_DecodeBoolean(bs, <sTag>, <p>, ret);
<if(soCheckExp)><soCheckExp><endif>
ret.ErrorCode := (if ret.Success then 0 else <sErrCode>);
>>

Real_encode(p, sTag, nLevel, soCheckExp, sErrCode) ::= <<
adaasn1rtl.encoding.xer.Xer_EncodeReal(bs, <sTag>, <p>, ret, <nLevel>);
ret.ErrorCode := <sErrCode>;
>>

Real_decode(p, sTag, nLevel, soCheckExp, sErrCode) ::= <<
adaasn1rtl.encoding.xer.Xer_DecodeReal(bs, <sTag>, <p>, ret);
<if(soCheckExp)><soCheckExp><endif>
ret.ErrorCode := (if ret.Success then 0 else <sErrCode>);
>>

ObjectIdentifier_encode(p, sTag, nLevel, soCheckExp, sErrCode) ::= <<
adaasn1rtl.encoding.xer.Xer_EncodeObjectIdentifier(bs, <sTag>, <p>, ret, <nLevel>);
>>

ObjectIdentifier_decode(p, sTag, nLevel, soCheckExp, sErrCode) ::= <<
adaasn1rtl.encoding.xer.Xer_DecodeObjectIdentifier(bs, <sTag>, <p>, ret);
<if(soCheckExp)><soCheckExp><endif>
ret.ErrorCode := (if ret.Success then 0 else <sErrCode>);
>>



TimeType_encode(p, sTimeSubType, sTag, nLevel, soCheckExp, sErrCode) ::= <<
adaasn1rtl.encoding.xer.Xer_Encode_<sTimeSubType>(bs, <sTag>, <p>, ret, <nLevel>);
>>

TimeType_decode(p, sTimeSubType, sTag, nLevel, soCheckExp, sErrCode) ::= <<
adaasn1rtl.encoding.xer.Xer_Decode_<sTimeSubType>(bs, <sTag>, <p>, ret);
<if(soCheckExp)><soCheckExp><endif>
ret.ErrorCode := (if ret.Success then 0 else <sErrCode>);
>>



String_encode(p, sTag, nLevel, soCheckExp, sErrCode) ::= <<
adaasn1rtl.encoding.xer.Xer_EncodeString(bs, <sTag>, <p>, ret, <nLevel>);
ret.ErrorCode := <sErrCode>;
>>

String_decode(p, sTag, nLevel, soCheckExp, sErrCode) ::= <<
adaasn1rtl.encoding.xer.Xer_DecodeString(bs, <sTag>, <p>, ret);
<if(soCheckExp)><soCheckExp><endif>
ret.ErrorCode := (if ret.Success then 0 else <sErrCode>);
>>


Enumerated_item_encode(p, sTag, nLevel, sItemID, sXerValue, sErrCode, bFirst) ::= <<
when <sItemID>    => 
	adaasn1rtl.encoding.xer.Xer_EncodeEnumerated(bs, <sTag>, "<sXerValue>", ret, <nLevel>);
    ret.ErrorCode := <sErrCode>;
>>

Enumerated_encode(p, sTag, nLevel, arrsItems, soCheckExp, sErrCode) ::= <<
case <p> is 
    <arrsItems; separator="\n">
end case;
>>


Enumerated_item_decode(p, sTag, nLevel, sItemID, sXerValue, sErrCode, bFirst) ::= <<
<if(!bFirst)>els<endif>if String_Equal(enmLabel,  "<sXerValue>") then
    <p> := <sItemID>;
>>

Enumerated_decode(p, sTag, nLevel, arrsItems, soCheckExp, sErrCode) ::= <<
declare
	enmLabel : adaasn1rtl.encoding.xer.XString (1 .. 200) := (1 .. 200 => adaasn1rtl.NUL);
begin
	adaasn1rtl.encoding.xer.Xer_DecodeEnumerated(bs, <sTag>, enmLabel, ret);
    if ret.Success then
        <arrsItems; separator="\n">
	    else 
		    ret.ErrorCode := <sErrCode>;
	    end if;
    else
	    ret.ErrorCode := <sErrCode>;
    end if;

end;
>>



OctetString_encode(p, sAcc, sTag, nLevel, nSizeMax, bIsFixedSize, soCheckExp, sErrCode) ::= <<
adaasn1rtl.encoding.xer.Xer_EncodeOctetString(bs, <sTag>, <p><sAcc>Data, <if(!bIsFixedSize)><p><sAcc>Length<else><nSizeMax><endif>, ret, <nLevel>);
ret.ErrorCode := (if ret.Success then 0 else <sErrCode>);
>>

OctetString_decode(p, sAcc, sTag, nLevel, nSizeMax, bIsFixedSize, soCheckExp, sErrCode) ::= <<
<if(bIsFixedSize)>
declare
	fixed_length : integer;
begin
	adaasn1rtl.encoding.xer.Xer_DecodeOctetString(bs, <sTag>, <p><sAcc>Data, fixed_length, ret);
	<if(soCheckExp)><soCheckExp><endif>
	ret.ErrorCode := (if ret.Success and then fixed_length = <nSizeMax> then 0 else <sErrCode>);
end;

<else>
adaasn1rtl.encoding.xer.Xer_DecodeOctetString(bs, <sTag>, <p><sAcc>Data, <p><sAcc>Length, ret);
<if(soCheckExp)><soCheckExp><endif>
ret.ErrorCode := (if ret.Success then 0 else <sErrCode>);

<endif>
>>


BitString_encode(p, sAcc, sTag, nLevel, nSizeMax, bIsFixedSize, soCheckExp, sErrCode) ::= <<
adaasn1rtl.encoding.xer.Xer_EncodeBitString(bs, <sTag>, <p><sAcc>Data, <if(!bIsFixedSize)><p><sAcc>Length<else><nSizeMax><endif>, ret, <nLevel>);
ret.ErrorCode := (if ret.Success then 0 else <sErrCode>);
>>

BitString_decode(p, sAcc, sTag, nLevel, nSizeMax, bIsFixedSize, soCheckExp, sErrCode) ::= <<
<if(bIsFixedSize)>
declare
	fixed_length : integer;
begin
	adaasn1rtl.encoding.xer.Xer_DecodeBitString(bs, <sTag>, <p><sAcc>Data, fixed_length, ret);
	<if(soCheckExp)><soCheckExp><endif>
	ret.ErrorCode := (if ret.Success and then fixed_length = <nSizeMax> then 0 else <sErrCode>);
end;

<else>
adaasn1rtl.encoding.xer.Xer_DecodeBitString(bs, <sTag>, <p><sAcc>Data, <p><sAcc>Length, ret);
<if(soCheckExp)><soCheckExp><endif>
ret.ErrorCode := (if ret.Success then 0 else <sErrCode>);

<endif>
>>


Null_encode(p, sTag, nLevel, soCheckExp, sErrCode) ::= <<
adaasn1rtl.encoding.xer.Xer_EncodeNull(bs, <sTag>, <p>, ret, <nLevel>);
ret.ErrorCode := (if ret.Success then 0 else <sErrCode>);
>>

Null_decode(p, sTag, nLevel, soCheckExp, sErrCode) ::= <<
adaasn1rtl.encoding.xer.Xer_DecodeNull(bs, <sTag>, <p>, ret);
<if(soCheckExp)><soCheckExp><endif>
ret.ErrorCode := (if ret.Success then 0 else <sErrCode>);
>>


SequenceOf_encode(p, sAcc, sTag, nLevel, sI, nSizeMax, sChildBody, bFixedSize, soCheckExp, sErrCode) ::= <<
-- SEQUENCE OF Encode
adaasn1rtl.encoding.xer.Xer_EncodeComplexElementStart(bs, <sTag>, ret, <nLevel>);
if ret.Success then
	<sI> := 1;
	while <sI>\<= <if(!bFixedSize)><p><sAcc>Length<else><nSizeMax><endif> and ret.Success loop
		<sChildBody>
		<sI> := <sI> + 1;
	end loop;
    if ret.Success then
        adaasn1rtl.encoding.xer.Xer_EncodeComplexElementEnd(bs, <sTag>, ret, <nLevel>);
		ret.ErrorCode := (if ret.Success then 0 else <sErrCode>);
    end if;
end if;
>>


SequenceOf_decode(p, sAcc, sTag, nLevel, sI, nSizeMax, sChildBody, bFixedSize, soCheckExp, sErrCode) ::= <<
-- SEQUENCE OF Decode
adaasn1rtl.encoding.xer.Xer_DecodeComplexElementStart(bs, <sTag>, ret);
if ret.Success then
    <sI> := 1;
    while ret.Success and  not adaasn1rtl.encoding.xer.Xer_NextEndElementIs(bs, <sTag>) loop
	    <sChildBody>
	    <sI> := <sI> + 1;
    end loop;
    <if(!bFixedSize)><p><sAcc>Length := <sI> - 1;<endif>
    if ret.Success then
		adaasn1rtl.encoding.xer.Xer_DecodeComplexElementEnd(bs, <sTag>, ret);
		ret.ErrorCode := (if ret.Success then 0 else <sErrCode>);
    end if;
end if;

<if(soCheckExp)><soCheckExp><endif>

<if(bFixedSize)>
ret.ErrorCode := ( if ret.Success and then <sI> + 1 = <nSizeMax> then  0 else <sErrCode>);

<else>
ret.ErrorCode := (if ret.Success then 0 else <sErrCode>);

<endif>
>>



/* SEQUENCE Start*/

Sequence_mandatory_child_encode(sChName, sChildContent, sChildTag) ::= <<
--Encode <sChName> 
<sChildContent>
>>

Sequence_mandatory_child_decode(sChName, sChildContent, sChildTag) ::= <<
--Decode <sChName> 
ret.Success := adaasn1rtl.encoding.xer.Xer_NextStartElementIs(bs, "<sChildTag>");
if ret.Success then
	<sChildContent>
end if;
>>

Sequence_optional_child_encode(p, sAcc, sChName, sChildContent, sChildTag) ::= <<
--Encode <sChName> 
if <p>.Exist.<sChName> = 1 then
	<sChildContent>
end if;
>>

Sequence_optional_child_decode(p, sAcc, sChName, sChildContent, sChildTag) ::= <<
--Decode <sChName> 
<p>.Exist.<sChName> := 0;
if adaasn1rtl.encoding.xer.Xer_NextStartElementIs(bs, "<sChildTag>") then
	<p>.Exist.<sChName> := 1;
	<sChildContent>
end if;
>>

Sequence_default_child_encode(p, sAcc, sChName, sChildContent, sChildTag, sInitWithDefaultValue) ::= <<
<Sequence_optional_child_encode(p=p, sAcc=sAcc, sChName=sChName, sChildContent=sChildContent, sChildTag=sChildTag)>
>>


Sequence_default_child_decode(p, sAcc, sChName, sChildContent, sChildTag, sInitWithDefaultValue) ::= <<
--Decode <sChName> 
<p>.Exist.<sChName> := 0;
if adaasn1rtl.encoding.xer.Xer_NextStartElementIs(bs, "<sChildTag>") then
	<p>.Exist.<sChName> := 1;
	<sChildContent>
else
    <sInitWithDefaultValue>
end if;
>>


SEQUENCE_start_encode(p, sTag, nLevel, sErrCode, bEmptySequence) ::= <<
adaasn1rtl.encoding.xer.Xer_EncodeComplexElementStart(bs, <sTag>, ret, <nLevel>);
ret.ErrorCode := (if ret.Success then 0 else <sErrCode>);
>>

SEQUENCE_start_decode(p, sTag, nLevel, sErrCode, bEmptySequence) ::= <<
<if(bEmptySequence)><p> := (null record);<endif>
adaasn1rtl.encoding.xer.Xer_DecodeComplexElementStart(bs, <sTag>, ret);
ret.ErrorCode := (if ret.Success then 0 else <sErrCode>);
>>


SEQUENCE_end_encode(sTag, nLevel, sErrCode) ::= <<
adaasn1rtl.encoding.xer.Xer_EncodeComplexElementEnd(bs, <sTag>, ret, <nLevel>);
ret.ErrorCode := (if ret.Success then 0 else <sErrCode>);
>>

SEQUENCE_end_decode(sTag, nLevel, sErrCode) ::= <<
adaasn1rtl.encoding.xer.Xer_DecodeComplexElementEnd(bs, <sTag>, ret);
ret.ErrorCode := (if ret.Success then 0 else <sErrCode>);
>>


SEQUENCE_xer_encode(sChildren) ::= <<
-- SEQUENCE Encode
<sChildren>
>>

SEQUENCE_xer_decode(sChildren) ::= <<
-- SEQUENCE Decode
<sChildren>
>>



CHOICE_child_encode(p, sAcc, sChID, sChildBody, bFirst, sChildTag, sChildName, sChildTypeDef, sChoiceTypeName) ::= <<
when <sChID> =>
	<sChildBody>
>>


CHOICE_child_decode(p, sAcc, sChID, sChildBody, bFirst, sChildTag, sChildName, sChildTypeDef, sChoiceTypeName) ::= <<
<if(!bFirst)>els<endif>if String_Equal(nextTag, "<sChildTag>") then
  declare
     <sChildName>_tmp:<sChildTypeDef>;
  begin
    <sChildBody>
    if ret.Success THEN
        <p> := <sChoiceTypeName>'(kind => <sChID>, <sChildName> => <sChildName>_tmp);
    end if;
  end;
>>


CHOICE_no_tag_encode(p, sAcc, arrsChildren, sErrCode) ::= <<
case <p><sAcc>kind IS
    <arrsChildren; separator="\n">
end case;
>>

CHOICE_no_tag_decode(p, sAcc, arrsChildren, sErrCode) ::=<<
declare
    nextTag  : adaasn1rtl.encoding.xer.XString (1 .. 256) := (1 .. 256 => adaasn1rtl.NUL);
begin
	adaasn1rtl.encoding.xer.Xer_LA_NextElementTag(bs, nextTag, ret);
	ret.ErrorCode := (if ret.Success then 0 else <sErrCode>);
	if ret.Success THEN
		<arrsChildren; separator="\n"> 
        else
			ret.Success := False;
			ret.ErrorCode := <sErrCode>;
        end if;
	end if;
end;
>>

CHOICE_encode(p, sAcc, sTag, nLevel, sMainBody, sErrCode) ::= <<
--CHOICE Encode
adaasn1rtl.encoding.xer.Xer_EncodeComplexElementStart(bs, <sTag>, ret, <nLevel>);
if ret.Success THEN
    <sMainBody>
    if ret.Success THEN
        adaasn1rtl.encoding.xer.Xer_EncodeComplexElementEnd(bs, <sTag>, ret, <nLevel>);
    end if;
end if;
>>


CHOICE_decode(p, sAcc, sTag, nLevel, sMainBody, sErrCode) ::= <<
--CHOICE Decode
adaasn1rtl.encoding.xer.Xer_DecodeComplexElementStart(bs, <sTag>, ret);
ret.ErrorCode := (if ret.Success then 0 else <sErrCode>);
if ret.Success then
    <sMainBody>
	if ret.Success then
		adaasn1rtl.encoding.xer.Xer_DecodeComplexElementEnd(bs, <sTag>, ret);
		ret.ErrorCode := (if ret.Success then 0 else <sErrCode>);
	end if;
end if;
>>








call_base_type_func_encode(p, sXmlTag, sFuncName) ::= "<sFuncName>_aux(<p>, <sXmlTag>, bs, ret);"
call_base_type_func_decode(p, sXmlTag, sFuncName) ::= "<sFuncName>_aux(<p>, <sXmlTag>, bs, ret);"
