group a_equals;


JoinItems(sPart, soNestedPart) ::= <<
<sPart>
<if(soNestedPart)>
if ret then
    <soNestedPart>
end if;
<endif>
>>


PrintEqualDefintion(sFuncName, sTypeDefName) ::= <<
    function <sFuncName> (val1, val2 : <sTypeDefName>) return Boolean;
>>

PrintEqualPrimitive(sFuncName, sTypeDefName, sContent) ::= <<
    function <sFuncName> (val1, val2 : <sTypeDefName>) 
        return Boolean is
    begin
        return <sContent>;
    end <sFuncName>;
>>

PrintEqualComposite(sFuncName, sTypeDefName, sContent, arrsLocalVars) ::= <<
    function <sFuncName> (val1, val2 : <sTypeDefName>) return Boolean 
    is
        pragma Warnings (Off, "initialization of ret has no effect");        
        ret : Boolean := True;
        pragma Warnings (On, "initialization of ret has no effect");        
        <arrsLocalVars; separator="\n">
    begin
        <sContent>
        return ret;
    end <sFuncName>;
>>

equalTypeAssignment_def(sVarName1, sVarName2, sStar, sFuncName, sTypeDefName) ::= <<
function <sFuncName>(<sVarName1>, <sVarName2> : <sTypeDefName>) return Boolean;
>>

equalTypeAssignment(sVarName1, sVarName2, sStar, sFuncName, sTypeDefName, sContent, arrsLocalVars, bExpression) ::= <<
pragma Warnings (Off, "formal parameter ""<sVarName1>"" is not referenced");
pragma Warnings (Off, "formal parameter ""<sVarName2>"" is not referenced");
    function <sFuncName> (<sVarName1>, <sVarName2> :  <sTypeDefName>) return Boolean
    is
        <if(!bExpression)>
        pragma Warnings (Off, "initialization of ret has no effect");
        ret : Boolean := True;
        pragma Warnings (On, "initialization of ret has no effect");
        <arrsLocalVars; separator="\n">

        <endif>
    begin
        pragma Warnings (Off, "condition can only be False if invalid values present");
        pragma Warnings (Off, "condition can only be True if invalid values present");
        <if(bExpression)>
	    return <sContent>;

        <else>
        <sContent>
	    return ret;

        <endif>
        pragma Warnings (On, "condition can only be False if invalid values present");
        pragma Warnings (On, "condition can only be True if invalid values present");
    end <sFuncName>;
pragma Warnings (On, "formal parameter ""<sVarName1>"" is not referenced");
pragma Warnings (On, "formal parameter ""<sVarName2>"" is not referenced");
>>




/*
 *****************************************************************************************
               E Q U A L I T Y     F U N C T I O N S
 *****************************************************************************************
 */




isEqual_OctetString(p1, p2, bFixedSize, nFixedSize) ::= <<
<if(!bFixedSize)><p1>Length = <p2>Length and then <p1>Data(1 .. <p1>Length) = <p2>Data(1 .. <p2>Length)<else><p1>Data = <p2>Data<endif>
>>




isEqual_BitString(p1,p2,bFixedSize,nFixedSize) ::= <<
<isEqual_OctetString(p1=p1,p2=p2, bFixedSize=bFixedSize, nFixedSize=nFixedSize)>
>>



isEqual_SequenceOf_var_size(p1,p2, i, soInnerStatement) ::= <<
ret := (<p1>.Length = <p2>.Length);
<if(soInnerStatement)>
<i> := <p1>.Data'First;
while ret and <i> \<= <p1>.Length loop
    pragma Loop_Invariant (<i> \>= <p1>.Data'First and <i> \>= <p2>.Data'First and <i> \<= <p1>.Length  and <p1>.Length = <p2>.Length);
    <soInnerStatement>
    <i> := <i>+1;
end loop;

<else>
-- no need to test for equality the elements (always return true)
<endif>
>>


isEqual_SequenceOf_fix_size(p1,p2, i, nFixedSize, sInnerStatement) ::= <<
<i> := <p1>.Data'First;
while ret and <i> \<= <nFixedSize> loop
    pragma Loop_Invariant (<i> \>= <p1>.Data'First and <i> \>= <p2>.Data'First);
    <sInnerStatement>
    <i> := <i>+1;
end loop;
>>



isEqual_Sequence_Child(p1, p2, bIsOptional, sChName, soInnerStatement) ::= <<
<if(bIsOptional)>
ret := <p1>.Exist.<sChName> = <p2>.Exist.<sChName>;
<if(soInnerStatement)>
if ret and then <p1>.Exist.<sChName> = 1 then
    <soInnerStatement>
end if;

<endif>

<else>
<soInnerStatement>

<endif>
>>

isEqual_Choice_Child(sNamePresent, sInnerStatement) ::= <<
when <sNamePresent> =>
    <sInnerStatement>
>>

isEqual_Choice(p1, p2, sTasName, arrsChildren) ::= <<
ret := <p1>.kind = <p2>.kind;
if ret then
    case <p1>.kind is
        <arrsChildren; separator="\n">
    end case;
end if;
>>




call_base_type_func(p1, p2, sFuncName) ::= "<sFuncName>(<p1>, <p2>)"

makeExpressionToStatement(sIsValidExp) ::= <<
ret := <sIsValidExp>;
>>


callChildEqualFunc(p1, p2,  sChildEqualFuncName) ::= <<
ret := <sChildEqualFuncName>(<p1>, <p2>);
>>