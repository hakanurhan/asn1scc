group a_init;

rtlModuleName() ::= "adaasn1rtl"

initTypeAssignment_def(sVarName, sStar, sFuncName, sTypeDefName) ::= <<
function <sFuncName> return <sTypeDefName>;
>>

initTypeAssignment(sVarName, sStar, sFuncName, sTypeDefName, sContent, arrsLocalVariables) ::= <<
function <sFuncName> return <sTypeDefName>
is
    <sVarName>: <sTypeDefName>;
    <arrsLocalVariables; separator="\n">
begin
    <sContent>
	pragma Warnings (Off, "object ""val"" is always");
    return <sVarName>;
	pragma Warnings (On, "object ""val"" is always");
end <sFuncName>;
>>




initInteger(p, nValue) ::= "<p> := <nValue>;"
initReal(p, dValue) ::= "<p> := <dValue>;"
initBoolean(p, bValue) ::= "<p> := <if(bValue)>TRUE<else>FALSE<endif>;"

initIA5String(sPtr, sValue, arrsNullChars) ::= "<sPtr> := \"<sValue>\"<if(arrsNullChars)> & <arrsNullChars; wrap, anchor, separator=\" & \"><endif>;" 
initEnumerated(sVal, sValue) ::= "<sVal> := <sValue>;"
initNull(sVal)    ::= "<sVal> := 0;"


initTestCaseIA5String(p, sAcc, nSize, nMaxSizePlusOne, i, td/*:FE_StringTypeDefinition*/, bAlpha, arrnAlphabetAsciiCodes, nAlphabetLength, bZero) ::= <<
<i> := 1;
while <i>\<= <nMaxSizePlusOne> loop
    pragma Loop_Invariant (<i> >=1 and <i>\<=<nMaxSizePlusOne>);
    <if(bZero)>
    <p>(<i>) := <rtlModuleName()>.NUL;

    <else>
    if <i> \<= <nSize> then
    <if(bAlpha)>
        <p>(<i>) := <td.alpha_set>( ((<i>-1) mod <td.alpha_set>'Last) + 1 );

    <else>
        <p>(<i>) := Character'Val(Integer'Pos( if ((<i>-1) mod 128) = 0 then 65 else (<i>-1) mod 128));

    <endif>
    else
        <p>(<i>) := <rtlModuleName()>.NUL;
    end if;

    <endif>
    <i> := <i> + 1;
end loop;
>>

initObjectIdentifier_vali(p, sAcc, sI, nIntVal) ::= "<p><sAcc>values(<sI>) := <nIntVal>;"
initObjectIdentifier(p, sAcc, nSize, arrsValues) ::= <<
<p><sAcc>length := <nSize>;
<arrsValues; separator="\n">
>>

init_Asn1LocalTime(p, sAcc, tv/*:Asn1TimeValue*/) ::= <<
<p><sAcc>hours := <tv.hours>;
<p><sAcc>mins := <tv.mins>;
<p><sAcc>sec := <tv.secs>;  
<p><sAcc>fraction := <tv.secsFraction>;
>>

init_Asn1UtcTime(p, sAcc, tv/*:Asn1TimeValue*/) ::= <<
<p><sAcc>hours := <tv.hours>;
<p><sAcc>mins := <tv.mins>;
<p><sAcc>sec := <tv.secs>;  
<p><sAcc>fraction := <tv.secsFraction>;
>>


init_Asn1LocalTimeWithTimeZone(p, sAcc, tv/*:Asn1TimeValue*/, tz/*:Asn1TimeZoneValue*/) ::= <<
<p><sAcc>hours := <tv.hours>;
<p><sAcc>mins := <tv.mins>;
<p><sAcc>sec := <tv.secs>;  
<p><sAcc>fraction := <tv.secsFraction>;
<p><sAcc>tz.sign := <tz.sign>;
<p><sAcc>tz.hours := <tz.hours>;
<p><sAcc>tz.mins := <tz.mins>;
>>

init_Asn1Date(p, sAcc, dt/*:Asn1DateValue*/) ::= <<
<p><sAcc>years := <dt.years>;
<p><sAcc>months := <dt.months>;
<p><sAcc>days := <dt.days>;  
>>

init_Asn1Date_LocalTime(p, sAcc, dt/*:Asn1DateValue*/, tv/*:Asn1TimeValue*/) ::= <<
<init_Asn1Date(p=p, sAcc=sAcc, dt=dt)>
<init_Asn1LocalTime(p=p, sAcc=sAcc, tv=tv)>
>>

init_Asn1Date_UtcTime(p, sAcc, dt/*:Asn1DateValue*/, tv/*:Asn1TimeValue*/) ::= <<
<init_Asn1Date(p=p, sAcc=sAcc, dt=dt)>
<init_Asn1UtcTime(p=p, sAcc=sAcc, tv=tv)>
>>

init_Asn1Date_LocalTimeWithTimeZone(p, sAcc, dt/*:Asn1DateValue*/, tv/*:Asn1TimeValue*/, tz/*:Asn1TimeZoneValue*/) ::= <<
<init_Asn1Date(p=p, sAcc=sAcc, dt=dt)>
<init_Asn1UtcTime(p=p, sAcc=sAcc, tv=tv, tz=tz)>
>>



/* BIT AND OCTET STRINGS */
initBitOrOctStringFromCompoundLiteral(p, sCompLiteral) ::= "<p> := <sCompLiteral>;"
initFixSizeBitOrOctString_bytei(p, sAcc, sI, sByteHexVal) ::= "<p><sAcc>Data(<sI>) := 16#<sByteHexVal>#;"
initFixSizeBitOrOctString(p, sAcc,arrsBytes) ::= <<
<arrsBytes; separator="\n">
>>
initFixVarSizeBitOrOctString(p, sAcc, nSize, arrsBytes) ::= <<
<p><sAcc>Length := <nSize>;
<arrsBytes; separator="\n">
>>

initTestCaseOctetString(p, sAcc, nSize, i, bIsFixedSize, bZero, nMinSize) ::= <<
<i> := 1;
while <i>\<= <nSize> loop
    pragma Loop_Invariant (<i> >=1 and <i>\<=<nSize>);
    <p><sAcc>Data(<i>) := <rtlModuleName()>.Asn1Byte(<if(bZero)>0<else>(<i>-1) mod 256<endif>);
    <i> := <i> + 1;
end loop;
<if(!bIsFixedSize)><p><sAcc>Length := <if(bZero)><nMinSize><else><nSize><endif>;<endif>
>>

initTestCaseBitString(p, sAcc, nSize, nSizeCeiled, i, bIsFixedSize, bZero, nMinSize) ::= <<
<i> := 1;
while <i>\<= <nSize> loop
    pragma Loop_Invariant (<i> >=1 and <i>\<=<nSize>);
    <p><sAcc>Data(<i>) := <rtlModuleName()>.BIT(<if(bZero)>0<else>(<i>-1) mod 2<endif>);
    <i> := <i> + 1;
end loop;
<if(!bIsFixedSize)><p><sAcc>Length := <if(bZero)><nMinSize><else><nSize><endif>;<endif>
>>


/*SEQUENCE OF */

initSequence_pragma(p) ::= <<
pragma Annotate (GNATprove, False_Positive,"""<p>.Data"" might not be initialized", "Data are reserved by caller");
>>

initFixedSequenceOf(arrsInnerValues) ::= <<
<arrsInnerValues; separator="\n">        
>>


initVarSizeSequenceOf(p, sAcc, nSize, arrsInnerValues) ::= <<
<p><sAcc>Length := <nSize>;
<arrsInnerValues; separator="\n">        
>>

initTestCaseSizeSequenceOf_innerItem(bFirst, bLastItem, nCaseIdx, sChildCaseInit, i, nCaseLen) ::= <<
<if(!bLastItem)><if(bFirst)>if<else>elsif<endif> (<i>-1) mod <nCaseLen> = <nCaseIdx>  then<else>else<endif>
    <sChildCaseInit>
>>

initTestCaseSizeSequenceOf(p, sAcc, noMinSize, nSize, bIsFixedSize, arrsInnerItems, bMultiCases, i) ::= <<
<i> := 1;
while <i>\<= <nSize> loop
    pragma Loop_Invariant (<i> >=1 and <i>\<=<nSize>);
    <arrsInnerItems; separator="\n">
    <if(bMultiCases)>       
    end if;

    <endif>
    <i> := <i> + 1;
end loop;
<if(!bIsFixedSize)><p><sAcc>Length := <if(noMinSize)><noMinSize><else><nSize><endif>;<endif>
>>

/*SEQUENCE*/

initSequence_emptySeq(p) ::= <<
<p> := (null record);
>>

initSequence_optionalChild(p, sAcc, sChName, sPresentFlag, sChildContent) ::=<<
<p><sAcc>Exist.<sChName> := <sPresentFlag>;
<sChildContent>
>>

initSequence(arrsInnerValues) ::= <<
<arrsInnerValues; separator="\n">        
>>


initTestCase_sequence_child(p, sAcc, sChName, sChildContent, bOptional) ::= <<
--set <sChName> 
<if(bOptional)><p><sAcc>exist.<sChName> := 1;<endif>
<sChildContent>
>>
initTestCase_sequence_child_opt(p, sAcc, sChName) ::= <<
<p><sAcc>exist.<sChName> := 0;
>>

initTestCase_choice_child(p, sAcc, sChildID, sChildContent, sChildName, sChildTypeDef, sChoiceTypeName) ::= <<
--set <sChildName> 
declare
    <sChildName>_tmp:<sChildTypeDef>;
begin
    <sChildContent>
	pragma Warnings (Off, "object ""<sChildName>_tmp"" is always False at this point");
    <p> := <sChoiceTypeName>'(kind => <sChildID>, <sChildName> => <sChildName>_tmp);
	pragma Warnings (On, "object ""<sChildName>_tmp"" is always False at this point");
end;
>>


initChoice(p1, sAccess, sChildContent, sChildKind, sChildTempVarName, sChildTypeName, sChoiceTypeName, sChildName) ::= <<
declare
   <sChildTempVarName> : <sChildTypeName>;
begin
    <sChildContent>        
    <p1> := <sChoiceTypeName>'(kind => <sChildKind>, <sChildName> => <sChildTempVarName>);
    pragma Annotate (GNATprove, False_Positive,"discriminant check might fail", "reviewed by GM");
end;
>>



initChildWithInitFunc(p, sChildInitFuncName) ::= <<
<p> := <sChildInitFuncName>;
>>