group a_isvalid;

rtlModuleName() ::= "adaasn1rtl"


always_true_statement ()::= <<
ret := <rtlModuleName()>.ASN1_RESULT'(Success => true, ErrorCode => 0);
>>

always_false_statement (sErrorCodeName)::= <<
ret := <rtlModuleName()>.ASN1_RESULT'(Success => false, ErrorCode => <sErrorCodeName>);
>>


makeExpressionToStatement0(sIsValidExp) ::= <<
ret.Success := <sIsValidExp>;
>>

convertVCBExpressionToStatementAndUpdateErrCode(sIsValidExp, sErrCode) ::= <<
ret.Success := <sIsValidExp>;
ret.ErrorCode := (if ret.Success then 0 else <sErrCode>);
>>

convertVCBStatementToStatementAndUpdateErrCode(sStatement, sErrCode) ::= <<
<sStatement>
ret.ErrorCode := (if ret.Success then 0 else <sErrCode>);
>>

convertVCBTRUEToStatementAndUpdateErrCode() ::= <<
ret := <rtlModuleName()>.ASN1_RESULT'(Success => true, ErrorCode => 0);
>>

convertVCBFalseToStatementAndUpdateErrCode(sErrCode) ::= <<
ret := <rtlModuleName()>.ASN1_RESULT'(Success => false, ErrorCode => <sErrCode>);
>>


JoinTwoIfFirstOk(sStr1,sStr2) ::=<<
<sStr1>
if ret.Success then
    <sStr2>
end if;
>>




ExpEqual(sExp1, sExp2) ::= "(<sExp1> = <sExp2>)"
ExpStringEqual(sExp1, sExp2) ::= "(<sExp1> = <sExp2>)"
ExpGt(sExp1, sExp2) ::= "(<sExp1> \> <sExp2>)"
ExpGte(sExp1, sExp2) ::= "(<sExp1> \>= <sExp2>)"
ExpLt(sExp1, sExp2) ::= "(<sExp1> \< <sExp2>)"
ExpLte(sExp1, sExp2) ::= "(<sExp1> \<= <sExp2>)"
ExpOr(sExp1, sExp2) ::= "((<sExp1>) OR (<sExp2>))"
ExpAnd(sExp1, sExp2) ::= "(<sExp1> AND <sExp2>)"
ExpAndMulit(arrsExp) ::= <<
<arrsExp; separator=" AND ">
>>
ExpNot(sExp) ::= "(NOT <sExp>)"
StrLen(sExp) ::= "<rtlModuleName()>.getStringSize(<sExp>)"
ArrayLen(sExp, sAcc) ::= "<sExp><sAcc>Length"


ExpressionToStament(sExp1) ::=<<
ret.Success := <sExp1>;
>>


StatementOrStament(sStat1, sStat2) ::= <<
<sStat1>
if not ret.Success then
    <sStat2>
end if;
>>

ExpressionOrStament(sExp1, sStat2) ::= <<
ret := <sExp1>;
if not ret.Success then
    <sStat2>
end if;
>>

StatementOrExpression(sStat1, sExp2) ::= <<
<sStat1>;
if not ret.Success then
    ret.Success := <sExp2>;
end if;
>>

StatementAndStament(sStat1, sStat2) ::= <<
<sStat1>
if ret.Success then
    <sStat2>
end if;
>>

ExpressionAndStament(sExp1, sStat2) ::= <<
ret.Success := <sExp1>;
if ret.Success then
    <sStat2>
end if;
>>

StatementAndExpression(sStat1, sExp2) ::= <<
<sStat1>;
if ret.Success then
    ret.Success := <sExp2>;
end if;
>>

StatementNot(sStat) ::= <<
<sStat>;
ret.Success := not ret.Success;
>>

StatementExceptStament(sStat1, sStat2) ::= <<
<sStat1>
if ret.Success then
    <sStat2>
    ret.Success := not ret.Success;
end if;
>>

ExpressionExceptStament(sExp1, sStat2) ::= <<
ret.Success := <sExp1>;
if ret.Success then
    <sStat2>
    ret.Success := not ret.Success;
end if;
>>

StatementExceptExpression(sStat1, sExp2) ::= <<
<sStat1>;
if ret.Success then
    ret.Success := not (<sExp2>);
end if;
>>



StatementForLoop(p, sAcc, i, bIsFixedSize, nFixedSize, sInnerStatement) ::= <<
<i> := <p>.Data'First;
while ret.Success and <i> \<= <if(bIsFixedSize)><nFixedSize><else><p>.Length<endif> loop
    --  pragma Loop_Invariant (<i> \>= <p>.Data'First and <i> \<= <if(bIsFixedSize)><nFixedSize><else><p>.Length<endif>);
    <soInnerStatement>
    <i> := <i>+1;
end loop;
>>


EmitTypeAssignment_primitive_def(sVarName, sStar, sFuncName, sTypeDefName, sErrCode, nErrValue) ::= <<
<sErrCode>:constant Integer := <nErrValue>; -- 
function <sFuncName> (<sVarName> : <sTypeDefName>) return <rtlModuleName()>.ASN1_RESULT;
>>

EmitTypeAssignment_primitive(sVarName, sStar, sFuncName, sTypeDefName, sContent, arrsAlphaFuncs) ::= <<
<arrsAlphaFuncs; separator="\n">
function <sFuncName> (<sVarName> : <sTypeDefName>) return <rtlModuleName()>.ASN1_RESULT
is
    ret : <rtlModuleName()>.ASN1_RESULT;
begin
    <sContent>
    return ret;
end <sFuncName>;
>>

EmitTypeAssignment_composite_def_err_code(sErrCode, nErrValue) ::= <<
<sErrCode>:constant Integer := <nErrValue>; 
>>

EmitTypeAssignment_composite_def(sVarName, sStar, sFuncName, sTypeDefName, arrsErrcodes) ::= <<
<arrsErrcodes; separator="\n">
function <sFuncName>(<sVarName> : <sTypeDefName>) return <rtlModuleName()>.ASN1_RESULT;
>>

EmitTypeAssignment_composite(sVarName, sStar, sFuncName, sTypeDefName, sContent, arrsAlphaFuncs, arrsLocalVars) ::= <<
<arrsAlphaFuncs; separator="\n">
	pragma Warnings (Off, "formal parameter ""val"" is not referenced");
function <sFuncName>(<sVarName> : <sTypeDefName>) return <rtlModuleName()>.ASN1_RESULT
is
	pragma Warnings (On, "formal parameter ""val"" is not referenced");
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : <rtlModuleName()>.ASN1_RESULT := <rtlModuleName()>.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
    <arrsLocalVars; separator="\n">
begin
	pragma Warnings (Off, "condition can only be False if invalid values present");
	pragma Warnings (Off, "condition can only be True if invalid values present");
    <sContent>
	pragma Warnings (On, "condition can only be False if invalid values present");
	pragma Warnings (On, "condition can only be True if invalid values present");
    return ret;
end <sFuncName>;
>>



Print_AlphabetCheckFunc_str() ::= "str(I)"

Print_AlphabetCheckFunc(sFuncName, arrsAlphaConBody) ::= <<
function <sFuncName> (str : String) return boolean 
  with
      pre =\> STR'First=1 AND STR'Last\>=STR'First AND STR'Last\<=Integer'LAST-1
is
    ret:boolean:=true;
    I:Integer:=1;
    strLen :constant Integer := <rtlModuleName()>.getStringSize(str);
begin
    while I\<= strLen and ret loop
        --  pragma Loop_Invariant (I>=1 and I\<=str'Last);
        ret := <arrsAlphaConBody; separator=" and ">;
        I := I + 1;
    end loop;
    return ret;
end <sFuncName>;
>>




PrintMultipleConstraints(arrsConstraints) ::= "<arrsConstraints; separator=\" AND \">"

callAlphaFunc(sFuncName, p) ::= "<sFuncName>_CharsAreValid(<p>)"

getStringSize(p) ::= "<rtlModuleName()>.getStringSize(<p>)"

getSizeableSize(p) ::= "<p>.Length"

stringContainsChar(sStrVal, p) ::= "<rtlModuleName()>.encoding.stringContainsChar(<sStrVal>, <p>)"

PrintReference1(p, sName) ::= "<sName>_IsConstraintValid(<p>)"

PrintReference2(p, sModName,sName) ::= "<sModName>.<sName>_IsConstraintValid(<p>)"

call_base_type_func(p, sFuncName) ::= "ret := <sFuncName>(<p>);"
call_base_type_func_exp(p, sFuncName) ::= "<sFuncName>(<p>).Success"


SingleValContraint(p, v) ::= "(<p> = <v>)"

RangeContraint(p, v1, v2, bMin, bMax) ::= "(<v1> \<<if(bMin)>=<endif> <p> AND <p> \<<if(bMax)>=<endif> <v2>)"

RangeContraint_val_MAX(p, v, bMin) ::= "<p> ><if(bMin)>=<endif> <v>"

RangeContraint_MIN_val(p, v, bMax) ::= "<p> \<<if(bMax)>=<endif> <v>"

AND_Constraint(sCon1, sCon2) ::= "(<sCon1> AND <sCon2>)"

OR_Constraint(sCon1, sCon2) ::= "(<sCon1> OR <sCon2>)"

AllExceptConstraint(sCon)  ::= "(NOT (<sCon>))"

ExceptConstraint(sCon1,sCon2) ::= "(<sCon1> AND NOT (<sCon2>))"


Emit_local_variable_SQF_Index(nI, bHasInitalValue)::="I<nI>:Integer<if(bHasInitalValue)>:=1<endif>;"




Emit_type(arrsConstraints, sErrCodeName) ::= <<
ret := <rtlModuleName()>.ASN1_RESULT'(Success => <if(arrsConstraints)><arrsConstraints; separator=" AND "><else>True<endif>, ErrorCode => <sErrCodeName>);
>>

Emit_Reference1(p, sName) ::= "ret := <sName>_IsConstraintValid(<p>);"

Emit_Reference2(p, sModName,sName) ::= "ret := <sModName>.<sName>_IsConstraintValid(<p>);"

/* SEQUENCE OF start*/



sequenceOf(p,sAcc, i, bIsFixedSize, nFixedSize, soIsValidSizeExp, soErrCode, soInnerStatement) ::= <<
<if(!bIsFixedSize)>
ret := <rtlModuleName()>.ASN1_RESULT'(Success => <soIsValidSizeExp>, ErrorCode => <soErrCode>);

<endif>
<if (soInnerStatement)>
<i> := <p>.Data'First;
while ret.Success and <i> \<= <if(bIsFixedSize)><nFixedSize><else><p>.Length<endif> loop
    --  pragma Loop_Invariant (<i> \>= <p>.Data'First and <i> \<= <if(bIsFixedSize)><nFixedSize><else><p>.Length<endif>);
    <soInnerStatement>
    <i> := <i>+1;
end loop;

<endif>
>>

sequenceOf2(p,sAcc, i, bIsFixedSize, nFixedSize, sInnerStatement) ::= <<
<i> := <p>.Data'First;
while ret.Success and <i> \<= <if(bIsFixedSize)><nFixedSize><else><p>.Length<endif> loop
    --  pragma Loop_Invariant (<i> \>= <p>.Data'First and <i> \<= <if(bIsFixedSize)><nFixedSize><else><p>.Length<endif>);
    <sInnerStatement>
    <i> := <i>+1;
end loop;
>>


/* SEQUENCE OF end*/


/* SEQUENCE start*/

Sequence_optional_child_always_present_or_absent(p, sAcc,  sChName, sErrCode, sPresOrAbs) ::= <<
ret:= <rtlModuleName()>.ASN1_RESULT'(Success => <p>.Exist.<sChName>=<sPresOrAbs>, ErrorCode => <sErrCode>);
>>

Sequence_optional_child_always_present_or_absent_expr(p, sAcc,  sChName, sPresOrAbs) ::= <<
<p>.Exist.<sChName>=<sPresOrAbs>
>>

Sequence_OptionalChild(p, sAcc, sChName, sInnerStatement) ::= <<
if <p>.Exist.<sChName> = 1 then
    <sInnerStatement>
end if;
>>

JoinItems(sPart, soNestedPart) ::= <<
<sPart>
<if(soNestedPart)>
if ret.Success then
    <soNestedPart>
end if;

<endif>
>>



Emit_sequence_optional_component(sParentPath, sName, sChildBody) ::=<<
if <sParentPath>.Exist.<sName>=1 then
    <sChildBody>
end if;
>>




/* SEQUENCE end*/

/*CHOICE start*/

Choice_OptionalChild(p, sAcc,  sChPresent, sInnerStatement) ::= <<
if <p><sAcc>kind = <sChPresent> then
	<sInnerStatement>
end if;
>>

Choice_child_always_present_Exp(p, sAcc, sChPresent) ::= <<
<p><sAcc>kind = <sChPresent>
>>

Choice_child_always_absent_Exp(p, sAcc, sChPresent) ::= <<
<p><sAcc>kind /= <sChPresent>
>>


choice_child(sChPresent, sChildBody, bAlwaysAbsent) ::= <<
WHEN <sChPresent> =>
    <sChildBody>
>>

choice(p, sAccess, arrsChildren, sErrCodeForInvalidCase) ::= <<
case <p>.kind is
    <arrsChildren; separator="\n">
end case;
>>

/*CHOICE end */


octet_var_string_equal(p, sAccess, nVarLength, sOctArrayLiteral )::=<<
<rtlModuleName()>.OctetString_equal(<p><sAccess>Length, <nVarLength>, <p><sAccess>Data, <sOctArrayLiteral>)
>>

octet_fix_string_equal(p, sAccess, nFixedSize, nVarLength, sOctArrayLiteral )::=<<
<rtlModuleName()>.OctetString_equal(<nFixedSize>, <nVarLength>, <p><sAccess>Data, <sOctArrayLiteral>)
>>

bit_var_string_equal(p, sAccess, nVarLength, sOctArrayLiteral, sBitArrayLiteral )::=<<
<rtlModuleName()>.BitString_equal(<p><sAccess>Length, <nVarLength>, <p><sAccess>Data, <sBitArrayLiteral>)
>>

bit_fix_string_equal(p, sAccess, nFixedSize, nVarLength, sOctArrayLiteral, sBitArrayLiteral  )::=<<
<rtlModuleName()>.BitString_equal(<nFixedSize>, <nVarLength>, <p><sAccess>Data, <sBitArrayLiteral>)
>>


objId_equal(p, sObjIdLiteral)::=<<
<rtlModuleName()>.ObjectIdentifier_equal(<p>, <sObjIdLiteral>)
>>
