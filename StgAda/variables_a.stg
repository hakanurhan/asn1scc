
group a_variables;

rtlModuleName() ::= "adaasn1rtl"

PrintIntValue(nValue) ::= "<nValue>"

PrintRealValue(dValue)	::= "<dValue>"

PrintStringValue(sValue, arrsNullChars)	::= "\"<sValue>\"<if(arrsNullChars)> & <arrsNullChars; wrap, anchor, separator=\" & \"><endif>"


PrintStringValueNull()	::= "<rtlModuleName()>.NUL"

PrintStringValueChar(sValue)	::= "'<sValue>'"


PrintRefValue1(sValue)	::= "<sValue>"
PrintRefValue2(sModName,sValue)	::= "<sModName>.<sValue>"


PrintEnumValue(sValue)	::= "<sValue>"

PrintRefValue_lengthOf(sValue)	::= "Integer(<sValue>)"

PrintCharValue(cValue)	::= "'<cValue>'"

PrintBooleanValue(bValue)	::= "<if(bValue)>True<else>FALSE<endif>"

PrintNullValue()	::= "0"

PrintOctetStringValue(td/*:FE_SizeableTypeDefinition*/,bIsFixedSize, arruBytes, nCount) ::= <<
<td.typeName>'(<if(!bIsFixedSize)>Length => <nCount>,<endif>Data => <td.array>'(<if(arruBytes)><arruBytes:{b|<i>=>16#<b;format="X2">#}; wrap, anchor, separator=", ">,<endif> others=> 16#0#)) 
>>

PrintBitOrOctetStringValueAsCompoundLitteral(td/*:FE_SizeableTypeDefinition*/, bIsFixedSize, arruBytes, nCount) ::= <<
<PrintOctetStringValue(td=td, bIsFixedSize=bIsFixedSize, arruBytes=arruBytes, nCount=nCount)>
>>

PrintOctetArrayAsCompoundLitteral(arruBytes) ::= <<
<rtlModuleName()>.OctetBuffer'(<arruBytes:{b|<i>=>16#<b;format="X2">#}; wrap, anchor, separator=", ">)
>>

PrintBitArrayAsCompoundLitteral(arruBits) ::= <<
<rtlModuleName()>.BitArray'(<arruBits:{b|<i>=>16#<b;format="X2">#}; wrap, anchor, separator=", ">)
>>

PrintBitStringValue(td/*:FE_SizeableTypeDefinition*/,bIsFixedSize, arrsBits, nCount) ::= <<
<td.typeName>'(<if(!bIsFixedSize)>Length => <nCount>,<endif>Data => <td.array>'(<if(arrsBits)><arrsBits:{b|<i>=><b>}; wrap, anchor, separator=", ">,<endif> others=> 0)) 
>>


PrintObjectIdentifierValue(td/*:FE_PrimitiveTypeDefinition*/, arrnValues, nCount) ::= <<
<td.typeName>'(Length => <nCount>, values => <rtlModuleName()>.ObjectIdentifier_array'(<if(arrnValues)><arrnValues; wrap, anchor, separator=", ">,<endif> others=> 0)) 
>>

PrintObjectIdentifierValueAsCompoundLiteral(arrnValues, nCount) ::= <<
<rtlModuleName()>.Asn1ObjectIdentifier'(Length => <nCount>, values => <rtlModuleName()>.ObjectIdentifier_array'(<if(arrnValues)><arrnValues; wrap, anchor, separator=", ">,<endif> others=> 0)) 
>>


PrintTimeValueAsCompoundLiteral_Asn1LocalTime(td/*:FE_PrimitiveTypeDefinition*/, tv/*:Asn1TimeValue*/) ::= <<
<rtlModuleName()>.Asn1LocalTime'(hours => <tv.hours>, mins => <tv.mins>, secs => <tv.secs>, secsFraction => <tv.secsFraction>)
>>

PrintTimeValueAsCompoundLiteral_Asn1UtcTime(td/*:FE_PrimitiveTypeDefinition*/, tv/*:Asn1TimeValue*/) ::= <<
<rtlModuleName()>.Asn1UtcTime'( hours => <tv.hours>, mins => <tv.mins>, secs => <tv.secs>, secsFraction => <tv.secsFraction>)
>>


PrintTimeValueAsCompoundLiteral_Asn1LocalTimeWithTimeZone(td/*:FE_PrimitiveTypeDefinition*/, tv/*:Asn1TimeValue*/, tz/*:Asn1TimeZoneValue*/) ::= <<
<rtlModuleName()>.Asn1TimeWithTimeZone'( hours => <tv.hours>, mins => <tv.mins>, secs => <tv.secs>, secsFraction> = <tv.secsFraction>, tz => Asn1TimeWithTimeZone'(sign => <tz.sign>, hours => <tz.hours>, mins => <tz.mins>))
>>

PrintTimeValueAsCompoundLiteral_Asn1Date(td/*:FE_PrimitiveTypeDefinition*/, dt/*:Asn1DateValue*/) ::= <<
<rtlModuleName()>.Asn1Date'( years => <dt.years>, months => <dt.months>, days => <dt.days>)
>>

PrintTimeValueAsCompoundLiteral_Asn1Date_LocalTime(td/*:FE_PrimitiveTypeDefinition*/, dt/*:Asn1DateValue*/, tv/*:Asn1TimeValue*/) ::= <<
<rtlModuleName()>.Asn1DateLocalTime'( date => <PrintTimeValueAsCompoundLiteral_Asn1Date(td=td,dt=dt)>, time => <PrintTimeValueAsCompoundLiteral_Asn1LocalTime(td=td,tv=tv)>)
>>

PrintTimeValueAsCompoundLiteral_Asn1Date_UtcTime(td/*:FE_PrimitiveTypeDefinition*/, dt/*:Asn1DateValue*/, tv/*:Asn1TimeValue*/) ::= <<
<rtlModuleName()>.Asn1DateUtcTime'( date => <PrintTimeValueAsCompoundLiteral_Asn1Date(td=td,dt=dt)>, time => <PrintTimeValueAsCompoundLiteral_Asn1UtcTime(td=td,tv=tv)>)
>>

PrintTimeValueAsCompoundLiteral_Asn1Date_LocalTimeWithTimeZone(td/*:FE_PrimitiveTypeDefinition*/, dt/*:Asn1DateValue*/, tv/*:Asn1TimeValue*/, tz/*:Asn1TimeZoneValue*/) ::= <<
<rtlModuleName()>.Asn1DateTimeWithTimeZone'( date => <PrintTimeValueAsCompoundLiteral_Asn1Date(td=td,dt=dt)>, time => <PrintTimeValueAsCompoundLiteral_Asn1LocalTimeWithTimeZone(td=td,tv=tv)>)
>>



PrintTimeValue_Asn1LocalTime(td/*:FE_PrimitiveTypeDefinition*/, tv/*:Asn1TimeValue*/) ::= <<
<td.typeName>'(hours => <tv.hours>, mins => <tv.mins>, secs => <tv.secs>, fraction => <tv.secsFraction>)
>>

PrintTimeValue_Asn1UtcTime(td/*:FE_PrimitiveTypeDefinition*/, tv/*:Asn1TimeValue*/) ::= <<
<td.typeName>'(hours => <tv.hours>, mins => <tv.mins>, secs => <tv.secs>, fraction => <tv.secsFraction>)
>>


PrintTimeValue_Asn1LocalTimeWithTimeZone(td/*:FE_PrimitiveTypeDefinition*/, tv/*:Asn1TimeValue*/, tz/*:Asn1TimeZoneValue*/) ::= <<
<td.typeName>'(hours => <tv.hours>, mins => <tv.mins>, secs => <tv.secs>, fraction => <tv.secsFraction>, tz => Asn1TimeZone'(sign => <tz.sign>, hours => <tz.hours>, mins => <tz.mins>))
>>

PrintTimeValue_Asn1Date(td/*:FE_PrimitiveTypeDefinition*/, dt/*:Asn1DateValue*/) ::= <<
<td.typeName>'(years => <dt.years>, months => <dt.months>, days => <dt.days>)
>>

PrintTimeValue_Asn1Date_LocalTime(td/*:FE_PrimitiveTypeDefinition*/, dt/*:Asn1DateValue*/, tv/*:Asn1TimeValue*/) ::= <<
<td.typeName>'( date => Asn1Date'(years => <dt.years>, months => <dt.months>, days => <dt.days>), time => Asn1LocalTime'(hours => <tv.hours>, mins => <tv.mins>, secs => <tv.secs>, fraction => <tv.secsFraction>) )
>>

PrintTimeValue_Asn1Date_UtcTime(td/*:FE_PrimitiveTypeDefinition*/, dt/*:Asn1DateValue*/, tv/*:Asn1TimeValue*/) ::= <<
<td.typeName>'( date => Asn1Date'(years => <dt.years>, months => <dt.months>, days => <dt.days>), time => Asn1UtcTime'(hours => <tv.hours>, mins => <tv.mins>, secs => <tv.secs>, fraction => <tv.secsFraction>) )
>>

PrintTimeValue_Asn1Date_LocalTimeWithTimeZone(td/*:FE_PrimitiveTypeDefinition*/, dt/*:Asn1DateValue*/, tv/*:Asn1TimeValue*/, tz/*:Asn1TimeZoneValue*/) ::= <<
<td.typeName>'( date => Asn1Date'(years => <dt.years>, months => <dt.months>, days => <dt.days>), time => Asn1TimeWithTimeZone'(hours => <tv.hours>, mins => <tv.mins>, secs => <tv.secs>, fraction => <tv.secsFraction>, tz => Asn1TimeZone'(sign => <tz.sign>, hours => <tz.hours>, mins => <tz.mins>)) )
>>


PrintSequenceValueChild(sName, sInnerValue) ::= "<sName> => <sInnerValue>"
PrintSequenceValue_child_exists(sName, sExistsBit) ::= "<sName> => <sExistsBit>"
PrintSequenceValue_Exists(td/*:FE_SequenceTypeDefinition*/, arrsOptionalPresentFields) ::="Exist => <td.exist>'(<arrsOptionalPresentFields; wrap, anchor,  separator=\",\">)"

PrintSequenceValue(sTasName,arrsChildren) ::= <<
<sTasName>'(
    <if(arrsChildren)><arrsChildren; separator=",\n"><else>null record<endif>
    )
>>


PrintChoiceValue(sTasName, sChildName, sChildVal, sChildNamePresent) ::= <<
<sTasName>'(kind => <sChildNamePresent>, <sChildName> => <sChildVal>)
>>

//function MyChoice_a1_set(itm:<rtlModuleName()>.Asn1Int) return MyChoice;
PrintChoiceValue_setters(sTasName, sChildName, sChildVal) ::= <<
<sTasName>_<sChildName>_set(<sChildVal>)
>>

PrintSequenceOfValue(td/*:FE_SizeableTypeDefinition*/, bIsFixedSize, nLength, arrsInnerValues, sDefValue) ::= <<
<td.typeName>'(<if(!bIsFixedSize)>Length => <nLength>,<endif>Data => <td.array>'(<if(arrsInnerValues)><arrsInnerValues:{b|<i>=><b>}; wrap, anchor, separator=", ">,<endif> others => <sDefValue>))
>>



