#ifndef GENERATED_ASN1SCC_a_H
#define GENERATED_ASN1SCC_a_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"
#include "asn1crt_encoding.h"


#ifdef  __cplusplus
extern "C" {
#endif


/*-- PacketHeader --------------------------------------------*/
typedef asn1SccUint PacketHeader_version;

typedef asn1SccUint PacketHeader_release;


typedef asn1SccUint PacketHeader_varSizeArray_elem;


typedef struct {
    int nCount; 
    
    PacketHeader_varSizeArray_elem arr[20];
} PacketHeader_varSizeArray;
typedef struct {
    PacketHeader_version version;
    PacketHeader_release release;
    PacketHeader_varSizeArray varSizeArray;

} PacketHeader;

flag PacketHeader_version_Equal(const PacketHeader_version* pVal1, const PacketHeader_version* pVal2);

flag PacketHeader_release_Equal(const PacketHeader_release* pVal1, const PacketHeader_release* pVal2);

flag PacketHeader_varSizeArray_elem_Equal(const PacketHeader_varSizeArray_elem* pVal1, const PacketHeader_varSizeArray_elem* pVal2);

flag PacketHeader_varSizeArray_Equal(const PacketHeader_varSizeArray* pVal1, const PacketHeader_varSizeArray* pVal2);

flag PacketHeader_Equal(const PacketHeader* pVal1, const PacketHeader* pVal2);

void PacketHeader_version_Initialize(PacketHeader_version* pVal);
void PacketHeader_release_Initialize(PacketHeader_release* pVal);
void PacketHeader_varSizeArray_elem_Initialize(PacketHeader_varSizeArray_elem* pVal);
void PacketHeader_varSizeArray_Initialize(PacketHeader_varSizeArray* pVal);
void PacketHeader_Initialize(PacketHeader* pVal);

#define ERR_PACKETHEADER		29  /**/
#define ERR_PACKETHEADER_VERSION		1  /**/
#define ERR_PACKETHEADER_RELEASE		8  /**/
#define ERR_PACKETHEADER_VARSIZEARRAY		22  /**/
#define ERR_PACKETHEADER_VARSIZEARRAY_ELM		15  /**/
flag PacketHeader_IsConstraintValid(const PacketHeader* pVal, int* pErrCode);

#define ERR_ACN_ENCODE_PACKETHEADER		32  /**/
#define ERR_ACN_ENCODE_PACKETHEADER_VERSION		4  /**/
#define ERR_ACN_ENCODE_PACKETHEADER_RELEASE		11  /**/
#define ERR_ACN_ENCODE_PACKETHEADER_VARSIZEARRAY		25  /**/
#define ERR_ACN_ENCODE_PACKETHEADER_VARSIZEARRAY_ELM		18  /**/
#define PacketHeader_REQUIRED_BYTES_FOR_ACN_ENCODING       15 
#define PacketHeader_REQUIRED_BITS_FOR_ACN_ENCODING        119

flag PacketHeader_ACN_Encode(const PacketHeader* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PACKETHEADER		33  /**/
#define ERR_ACN_DECODE_PACKETHEADER_VERSION		5  /**/
#define ERR_ACN_DECODE_PACKETHEADER_RELEASE		12  /**/
#define ERR_ACN_DECODE_PACKETHEADER_VARSIZEARRAY		26  /**/
#define ERR_ACN_DECODE_PACKETHEADER_VARSIZEARRAY_ELM		19  /**/
flag PacketHeader_ACN_Decode(PacketHeader* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- PacketBody --------------------------------------------*/
typedef asn1SccUint PacketBody_anInteger;


typedef asn1SccUint PacketBody_anotherSizeArray_elem;


typedef struct {
    int nCount; 
    
    PacketBody_anotherSizeArray_elem arr[100];
} PacketBody_anotherSizeArray;

typedef enum {
    PacketBody_NONE,
    aReal_PRESENT,
    anInteger_PRESENT,
    anotherSizeArray_PRESENT 
} PacketBody_selection;


typedef struct {
    PacketBody_selection kind;
    
    union {
        asn1Real aReal;
        PacketBody_anInteger anInteger;
        PacketBody_anotherSizeArray anotherSizeArray;
    } u; 
} PacketBody;

flag PacketBody_anInteger_Equal(const PacketBody_anInteger* pVal1, const PacketBody_anInteger* pVal2);

flag PacketBody_anotherSizeArray_elem_Equal(const PacketBody_anotherSizeArray_elem* pVal1, const PacketBody_anotherSizeArray_elem* pVal2);

flag PacketBody_anotherSizeArray_Equal(const PacketBody_anotherSizeArray* pVal1, const PacketBody_anotherSizeArray* pVal2);

flag PacketBody_Equal(const PacketBody* pVal1, const PacketBody* pVal2);

void PacketBody_anInteger_Initialize(PacketBody_anInteger* pVal);
void PacketBody_anotherSizeArray_elem_Initialize(PacketBody_anotherSizeArray_elem* pVal);
void PacketBody_anotherSizeArray_Initialize(PacketBody_anotherSizeArray* pVal);
void PacketBody_Initialize(PacketBody* pVal);

#define ERR_PACKETBODY		64  /**/
#define ERR_PACKETBODY_AREAL		36  /**/
#define ERR_PACKETBODY_ANINTEGER		43  /**/
#define ERR_PACKETBODY_ANOTHERSIZEARRAY		57  /**/
#define ERR_PACKETBODY_ANOTHERSIZEARRAY_ELM		50  /**/
flag PacketBody_IsConstraintValid(const PacketBody* pVal, int* pErrCode);

#define ERR_ACN_ENCODE_PACKETBODY		67  /**/
#define ERR_ACN_ENCODE_PACKETBODY_AREAL		39  /**/
#define ERR_ACN_ENCODE_PACKETBODY_ANINTEGER		46  /**/
#define ERR_ACN_ENCODE_PACKETBODY_ANOTHERSIZEARRAY		60  /**/
#define ERR_ACN_ENCODE_PACKETBODY_ANOTHERSIZEARRAY_ELM		53  /**/
#define PacketBody_REQUIRED_BYTES_FOR_ACN_ENCODING       102 
#define PacketBody_REQUIRED_BITS_FOR_ACN_ENCODING        809

flag PacketBody_ACN_Encode(const PacketBody* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PACKETBODY		68  /**/
#define ERR_ACN_DECODE_PACKETBODY_AREAL		40  /**/
#define ERR_ACN_DECODE_PACKETBODY_ANINTEGER		47  /**/
#define ERR_ACN_DECODE_PACKETBODY_ANOTHERSIZEARRAY		61  /**/
#define ERR_ACN_DECODE_PACKETBODY_ANOTHERSIZEARRAY_ELM		54  /**/
flag PacketBody_ACN_Decode(PacketBody* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- Packet --------------------------------------------*/
typedef struct {
    BitStream Packet_packet_length_in_bytes;
    BitStream Packet_packet_crc32;
} Packet_extension_function_positions;
typedef struct {
    PacketHeader p_header;
    PacketBody p_body;

} Packet;

flag Packet_Equal(const Packet* pVal1, const Packet* pVal2);

void Packet_Initialize(Packet* pVal);

#define ERR_PACKET		153  /**/
#define ERR_PACKET_P_HEADER		99  /**/
#define ERR_PACKET_P_HEADER_VERSION		71  /**/
#define ERR_PACKET_P_HEADER_RELEASE		78  /**/
#define ERR_PACKET_P_HEADER_VARSIZEARRAY		92  /**/
#define ERR_PACKET_P_HEADER_VARSIZEARRAY_ELM		85  /**/
#define ERR_PACKET_P_BODY		140  /**/
#define ERR_PACKET_P_BODY_AREAL		112  /**/
#define ERR_PACKET_P_BODY_ANINTEGER		119  /**/
#define ERR_PACKET_P_BODY_ANOTHERSIZEARRAY		133  /**/
#define ERR_PACKET_P_BODY_ANOTHERSIZEARRAY_ELM		126  /**/
flag Packet_IsConstraintValid(const Packet* pVal, int* pErrCode);

#define ERR_ACN_ENCODE_PACKET		156  /**/
#define ERR_ACN_ENCODE_PACKET_P_HEADER		102  /**/
#define ERR_ACN_ENCODE_PACKET_P_HEADER_VERSION		74  /**/
#define ERR_ACN_ENCODE_PACKET_P_HEADER_RELEASE		81  /**/
#define ERR_ACN_ENCODE_PACKET_P_HEADER_VARSIZEARRAY		95  /**/
#define ERR_ACN_ENCODE_PACKET_P_HEADER_VARSIZEARRAY_ELM		88  /**/
#define ERR_ACN_ENCODE_PACKET_PACKET_LENGTH_IN_BYTES		110  /**/
#define ERR_ACN_ENCODE_PACKET_P_BODY		143  /**/
#define ERR_ACN_ENCODE_PACKET_P_BODY_AREAL		115  /**/
#define ERR_ACN_ENCODE_PACKET_P_BODY_ANINTEGER		122  /**/
#define ERR_ACN_ENCODE_PACKET_P_BODY_ANOTHERSIZEARRAY		136  /**/
#define ERR_ACN_ENCODE_PACKET_P_BODY_ANOTHERSIZEARRAY_ELM		129  /**/
#define ERR_ACN_ENCODE_PACKET_PACKET_CRC32		151  /**/
#define Packet_REQUIRED_BYTES_FOR_ACN_ENCODING       122 
#define Packet_REQUIRED_BITS_FOR_ACN_ENCODING        972

flag Packet_ACN_Encode(const Packet* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PACKET		157  /**/
#define ERR_ACN_DECODE_PACKET_P_HEADER		103  /**/
#define ERR_ACN_DECODE_PACKET_P_HEADER_VERSION		75  /**/
#define ERR_ACN_DECODE_PACKET_P_HEADER_RELEASE		82  /**/
#define ERR_ACN_DECODE_PACKET_P_HEADER_VARSIZEARRAY		96  /**/
#define ERR_ACN_DECODE_PACKET_P_HEADER_VARSIZEARRAY_ELM		89  /**/
#define ERR_ACN_DECODE_PACKET_PACKET_LENGTH_IN_BYTES		111  /**/
#define ERR_ACN_DECODE_PACKET_P_BODY		144  /**/
#define ERR_ACN_DECODE_PACKET_P_BODY_AREAL		116  /**/
#define ERR_ACN_DECODE_PACKET_P_BODY_ANINTEGER		123  /**/
#define ERR_ACN_DECODE_PACKET_P_BODY_ANOTHERSIZEARRAY		137  /**/
#define ERR_ACN_DECODE_PACKET_P_BODY_ANOTHERSIZEARRAY_ELM		130  /**/
#define ERR_ACN_DECODE_PACKET_PACKET_CRC32		152  /**/
flag Packet_ACN_Decode(Packet* pVal, BitStream* pBitStrm, int* pErrCode);

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
