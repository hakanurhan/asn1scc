-- Code automatically generated by asn1scc tool
with Interfaces;
with adaasn1rtl;
with adaasn1rtl.encoding.test_cases_aux;
with MYMODULE;
use type Interfaces.Unsigned_8;
with adaasn1rtl;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
PACKAGE BODY MYMODULE_auto_tcs 
IS 

FUNCTION PacketHeader_ACN_enc_dec(val:MYMODULE.PacketHeader; Filename : in String) RETURN adaasn1rtl.TEST_CASE_RESULT
IS
    decodedPDU  : MYMODULE.PacketHeader;
    stream      : adaasn1rtl.encoding.Bitstream := adaasn1rtl.encoding.BitStream_init((if MYMODULE.PacketHeader_REQUIRED_BYTES_FOR_ACN_ENCODING = 0 then 1 else MYMODULE.PacketHeader_REQUIRED_BYTES_FOR_ACN_ENCODING));
    result      : adaasn1rtl.ASN1_RESULT;
    ret         : adaasn1rtl.TEST_CASE_RESULT;
BEGIN
    -- Encode value
    MYMODULE.PacketHeader_ACN_Encode(val, stream, result);
    ret := adaasn1rtl.TEST_CASE_RESULT'(Step => adaasn1rtl.TC_ENCODE, Success => result.Success, ErrorCode => result.ErrorCode);
    if result.Success THEN
        -- Decode value
        --at this point stream contains the ACN_ data
        stream.Current_Bit_Pos :=0;
        MYMODULE.PacketHeader_ACN_Decode(decodedPDU, stream, result);
        ret := adaasn1rtl.TEST_CASE_RESULT'(Step => adaasn1rtl.TC_DECODE, Success => result.Success, ErrorCode => result.ErrorCode);
        if result.Success THEN
            -- validate decoded data
            result := MYMODULE.PacketHeader_IsConstraintValid(decodedPDU);
            ret := adaasn1rtl.TEST_CASE_RESULT'(Step => adaasn1rtl.TC_VALIDATE_DECODED, Success => result.Success, ErrorCode => result.ErrorCode);
            if result.Success THEN
                ret := adaasn1rtl.TEST_CASE_RESULT'(Step => adaasn1rtl.TC_EQUAL, Success => MYMODULE.PacketHeader_Equal(val, decodedPDU), ErrorCode => result.ErrorCode);
                if result.Success THEN
                    adaasn1rtl.encoding.test_cases_aux.Write_BitStream_To_File(stream, Filename & ".dat");
                
                end if;
            
            end if;
        
        end if;
    
    end if;

    RETURN ret;
end PacketHeader_ACN_enc_dec;

FUNCTION PacketBody_ACN_enc_dec(val:MYMODULE.PacketBody; Filename : in String) RETURN adaasn1rtl.TEST_CASE_RESULT
IS
    decodedPDU  : MYMODULE.PacketBody;
    stream      : adaasn1rtl.encoding.Bitstream := adaasn1rtl.encoding.BitStream_init((if MYMODULE.PacketBody_REQUIRED_BYTES_FOR_ACN_ENCODING = 0 then 1 else MYMODULE.PacketBody_REQUIRED_BYTES_FOR_ACN_ENCODING));
    result      : adaasn1rtl.ASN1_RESULT;
    ret         : adaasn1rtl.TEST_CASE_RESULT;
BEGIN
    -- Encode value
    MYMODULE.PacketBody_ACN_Encode(val, stream, result);
    ret := adaasn1rtl.TEST_CASE_RESULT'(Step => adaasn1rtl.TC_ENCODE, Success => result.Success, ErrorCode => result.ErrorCode);
    if result.Success THEN
        -- Decode value
        --at this point stream contains the ACN_ data
        stream.Current_Bit_Pos :=0;
        MYMODULE.PacketBody_ACN_Decode(decodedPDU, stream, result);
        ret := adaasn1rtl.TEST_CASE_RESULT'(Step => adaasn1rtl.TC_DECODE, Success => result.Success, ErrorCode => result.ErrorCode);
        if result.Success THEN
            -- validate decoded data
            result := MYMODULE.PacketBody_IsConstraintValid(decodedPDU);
            ret := adaasn1rtl.TEST_CASE_RESULT'(Step => adaasn1rtl.TC_VALIDATE_DECODED, Success => result.Success, ErrorCode => result.ErrorCode);
            if result.Success THEN
                ret := adaasn1rtl.TEST_CASE_RESULT'(Step => adaasn1rtl.TC_EQUAL, Success => MYMODULE.PacketBody_Equal(val, decodedPDU), ErrorCode => result.ErrorCode);
                if result.Success THEN
                    adaasn1rtl.encoding.test_cases_aux.Write_BitStream_To_File(stream, Filename & ".dat");
                
                end if;
            
            end if;
        
        end if;
    
    end if;

    RETURN ret;
end PacketBody_ACN_enc_dec;

FUNCTION Packet_ACN_enc_dec(val:MYMODULE.Packet; Filename : in String) RETURN adaasn1rtl.TEST_CASE_RESULT
IS
    decodedPDU  : MYMODULE.Packet;
    stream      : adaasn1rtl.encoding.Bitstream := adaasn1rtl.encoding.BitStream_init((if MYMODULE.Packet_REQUIRED_BYTES_FOR_ACN_ENCODING = 0 then 1 else MYMODULE.Packet_REQUIRED_BYTES_FOR_ACN_ENCODING));
    result      : adaasn1rtl.ASN1_RESULT;
    ret         : adaasn1rtl.TEST_CASE_RESULT;
BEGIN
    -- Encode value
    MYMODULE.Packet_ACN_Encode(val, stream, result);
    ret := adaasn1rtl.TEST_CASE_RESULT'(Step => adaasn1rtl.TC_ENCODE, Success => result.Success, ErrorCode => result.ErrorCode);
    if result.Success THEN
        -- Decode value
        --at this point stream contains the ACN_ data
        stream.Current_Bit_Pos :=0;
        MYMODULE.Packet_ACN_Decode(decodedPDU, stream, result);
        ret := adaasn1rtl.TEST_CASE_RESULT'(Step => adaasn1rtl.TC_DECODE, Success => result.Success, ErrorCode => result.ErrorCode);
        if result.Success THEN
            -- validate decoded data
            result := MYMODULE.Packet_IsConstraintValid(decodedPDU);
            ret := adaasn1rtl.TEST_CASE_RESULT'(Step => adaasn1rtl.TC_VALIDATE_DECODED, Success => result.Success, ErrorCode => result.ErrorCode);
            if result.Success THEN
                ret := adaasn1rtl.TEST_CASE_RESULT'(Step => adaasn1rtl.TC_EQUAL, Success => MYMODULE.Packet_Equal(val, decodedPDU), ErrorCode => result.ErrorCode);
                if result.Success THEN
                    adaasn1rtl.encoding.test_cases_aux.Write_BitStream_To_File(stream, Filename & ".dat");
                
                end if;
            
            end if;
        
        end if;
    
    end if;

    RETURN ret;
end Packet_ACN_enc_dec;

end MYMODULE_auto_tcs;