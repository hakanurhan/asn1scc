-- Code automatically generated by asn1scc tool
with adaasn1rtl;
with adaasn1rtl.encoding;


with system;
use adaasn1rtl;
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
--# inherit ;


PACKAGE MYMODULE with SPARK_Mode
IS


-- PacketHeader --------------------------------------------
SUBTYPE PacketHeader_version is adaasn1rtl.Asn1UInt range 1 .. 100;

SUBTYPE PacketHeader_release is adaasn1rtl.Asn1UInt range 1 .. 100;

-- PacketHeader_varSizeArray --------------------------------------------

SUBTYPE PacketHeader_varSizeArray_elem is adaasn1rtl.Asn1UInt range 1 .. 20;


subtype PacketHeader_varSizeArray_index is integer range 1..20;
type PacketHeader_varSizeArray_array is array (PacketHeader_varSizeArray_index) of PacketHeader_varSizeArray_elem;
subtype PacketHeader_varSizeArray_length_index is integer range 1..20;
type PacketHeader_varSizeArray is  record
    Length : PacketHeader_varSizeArray_length_index;
    Data  : PacketHeader_varSizeArray_array;
end record;

type PacketHeader is record 
    version : PacketHeader_version;
    release : PacketHeader_release;
    varSizeArray : PacketHeader_varSizeArray;
end record;


function PacketHeader_version_Equal(val1, val2: in PacketHeader_version) return Boolean;

function PacketHeader_release_Equal(val1, val2: in PacketHeader_release) return Boolean;

function PacketHeader_varSizeArray_elem_Equal(val1, val2: in PacketHeader_varSizeArray_elem) return Boolean;

function PacketHeader_varSizeArray_Equal(val1, val2: in PacketHeader_varSizeArray) return Boolean;

function PacketHeader_Equal(val1, val2: in PacketHeader) return Boolean;

function PacketHeader_version_Init return PacketHeader_version;
function PacketHeader_release_Init return PacketHeader_release;
function PacketHeader_varSizeArray_elem_Init return PacketHeader_varSizeArray_elem;
function PacketHeader_varSizeArray_Init return PacketHeader_varSizeArray;
function PacketHeader_Init return PacketHeader;

ERR_PACKETHEADER:CONSTANT INTEGER := 29; 
ERR_PACKETHEADER_VERSION:CONSTANT INTEGER := 1; 
ERR_PACKETHEADER_RELEASE:CONSTANT INTEGER := 8; 
ERR_PACKETHEADER_VARSIZEARRAY:CONSTANT INTEGER := 22; 
ERR_PACKETHEADER_VARSIZEARRAY_ELM:CONSTANT INTEGER := 15; 
FUNCTION PacketHeader_IsConstraintValid(val : in PacketHeader) return adaasn1rtl.ASN1_RESULT;

ERR_ACN_ENCODE_PACKETHEADER:CONSTANT INTEGER := 32; 
ERR_ACN_ENCODE_PACKETHEADER_VERSION:CONSTANT INTEGER := 4; 
ERR_ACN_ENCODE_PACKETHEADER_RELEASE:CONSTANT INTEGER := 11; 
ERR_ACN_ENCODE_PACKETHEADER_VARSIZEARRAY:CONSTANT INTEGER := 25; 
ERR_ACN_ENCODE_PACKETHEADER_VARSIZEARRAY_ELM:CONSTANT INTEGER := 18; 
PacketHeader_REQUIRED_BYTES_FOR_ACN_ENCODING:CONSTANT INTEGER := 15;
PacketHeader_REQUIRED_BITS_FOR_ACN_ENCODING:CONSTANT INTEGER := 119;

subtype PacketHeader_ACN_Stream is adaasn1rtl.encoding.Bitstream(PacketHeader_REQUIRED_BYTES_FOR_ACN_ENCODING);

procedure PacketHeader_ACN_Encode(val:in PacketHeader; Stream : out PacketHeader_ACN_Stream; result : OUT adaasn1rtl.ASN1_RESULT);

ERR_ACN_DECODE_PACKETHEADER:CONSTANT INTEGER := 33; 
ERR_ACN_DECODE_PACKETHEADER_VERSION:CONSTANT INTEGER := 5; 
ERR_ACN_DECODE_PACKETHEADER_RELEASE:CONSTANT INTEGER := 12; 
ERR_ACN_DECODE_PACKETHEADER_VARSIZEARRAY:CONSTANT INTEGER := 26; 
ERR_ACN_DECODE_PACKETHEADER_VARSIZEARRAY_ELM:CONSTANT INTEGER := 19; 
procedure PacketHeader_ACN_Decode(val: out PacketHeader; Stream : in out PacketHeader_ACN_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
-- PacketBody --------------------------------------------
SUBTYPE PacketBody_anInteger is adaasn1rtl.Asn1UInt range 0 .. 65535;

-- PacketBody_anotherSizeArray --------------------------------------------

SUBTYPE PacketBody_anotherSizeArray_elem is adaasn1rtl.Asn1UInt range 1 .. 200;


subtype PacketBody_anotherSizeArray_index is integer range 1..100;
type PacketBody_anotherSizeArray_array is array (PacketBody_anotherSizeArray_index) of PacketBody_anotherSizeArray_elem;
subtype PacketBody_anotherSizeArray_length_index is integer range 1..100;
type PacketBody_anotherSizeArray is  record
    Length : PacketBody_anotherSizeArray_length_index;
    Data  : PacketBody_anotherSizeArray_array;
end record;

subtype PacketBody_index_range is integer range 0..2;

type PacketBody_selection is (aReal_PRESENT, anInteger_PRESENT, anotherSizeArray_PRESENT);
for PacketBody_selection use
    (aReal_PRESENT => 1, anInteger_PRESENT => 2, anotherSizeArray_PRESENT => 3);
for PacketBody_selection'Size use 32;

type PacketBody(kind : PacketBody_selection:= aReal_PRESENT) is 
record
    case kind is
    when aReal_PRESENT =>
            aReal: adaasn1rtl.Asn1Real;
    when anInteger_PRESENT =>
            anInteger: PacketBody_anInteger;
    when anotherSizeArray_PRESENT =>
            anotherSizeArray: PacketBody_anotherSizeArray;
    end case;
end record;

for PacketBody use 
record
    kind at 0 range 0..31;
end record;

function PacketBody_anInteger_Equal(val1, val2: in PacketBody_anInteger) return Boolean;

function PacketBody_anotherSizeArray_elem_Equal(val1, val2: in PacketBody_anotherSizeArray_elem) return Boolean;

function PacketBody_anotherSizeArray_Equal(val1, val2: in PacketBody_anotherSizeArray) return Boolean;

function PacketBody_Equal(val1, val2: in PacketBody) return Boolean;

function PacketBody_anInteger_Init return PacketBody_anInteger;
function PacketBody_anotherSizeArray_elem_Init return PacketBody_anotherSizeArray_elem;
function PacketBody_anotherSizeArray_Init return PacketBody_anotherSizeArray;
function PacketBody_Init return PacketBody;

ERR_PACKETBODY:CONSTANT INTEGER := 64; 
ERR_PACKETBODY_AREAL:CONSTANT INTEGER := 36; 
ERR_PACKETBODY_ANINTEGER:CONSTANT INTEGER := 43; 
ERR_PACKETBODY_ANOTHERSIZEARRAY:CONSTANT INTEGER := 57; 
ERR_PACKETBODY_ANOTHERSIZEARRAY_ELM:CONSTANT INTEGER := 50; 
FUNCTION PacketBody_IsConstraintValid(val : in PacketBody) return adaasn1rtl.ASN1_RESULT;

ERR_ACN_ENCODE_PACKETBODY:CONSTANT INTEGER := 67; 
ERR_ACN_ENCODE_PACKETBODY_AREAL:CONSTANT INTEGER := 39; 
ERR_ACN_ENCODE_PACKETBODY_ANINTEGER:CONSTANT INTEGER := 46; 
ERR_ACN_ENCODE_PACKETBODY_ANOTHERSIZEARRAY:CONSTANT INTEGER := 60; 
ERR_ACN_ENCODE_PACKETBODY_ANOTHERSIZEARRAY_ELM:CONSTANT INTEGER := 53; 
PacketBody_REQUIRED_BYTES_FOR_ACN_ENCODING:CONSTANT INTEGER := 102;
PacketBody_REQUIRED_BITS_FOR_ACN_ENCODING:CONSTANT INTEGER := 809;

subtype PacketBody_ACN_Stream is adaasn1rtl.encoding.Bitstream(PacketBody_REQUIRED_BYTES_FOR_ACN_ENCODING);

procedure PacketBody_ACN_Encode(val:in PacketBody; Stream : out PacketBody_ACN_Stream; result : OUT adaasn1rtl.ASN1_RESULT);

ERR_ACN_DECODE_PACKETBODY:CONSTANT INTEGER := 68; 
ERR_ACN_DECODE_PACKETBODY_AREAL:CONSTANT INTEGER := 40; 
ERR_ACN_DECODE_PACKETBODY_ANINTEGER:CONSTANT INTEGER := 47; 
ERR_ACN_DECODE_PACKETBODY_ANOTHERSIZEARRAY:CONSTANT INTEGER := 61; 
ERR_ACN_DECODE_PACKETBODY_ANOTHERSIZEARRAY_ELM:CONSTANT INTEGER := 54; 
procedure PacketBody_ACN_Decode(val: out PacketBody; Stream : in out PacketBody_ACN_Stream; result : OUT adaasn1rtl.ASN1_RESULT);
-- Packet --------------------------------------------

type Packet_extension_function_positions is record
    Packet_body_length_in_bytes : adaasn1rtl.encoding.BitstreamPtr;
    Packet_packet_crc32 : adaasn1rtl.encoding.BitstreamPtr;
end record;
type Packet is record 
    p_header : PacketHeader;
    p_body : PacketBody;
end record;


function Packet_Equal(val1, val2: in Packet) return Boolean;

function Packet_Init return Packet;

ERR_PACKET:CONSTANT INTEGER := 155; 
ERR_PACKET_P_HEADER_2:CONSTANT INTEGER := 106; 
ERR_PACKET_P_BODY_2:CONSTANT INTEGER := 148; 
FUNCTION Packet_IsConstraintValid(val : in Packet) return adaasn1rtl.ASN1_RESULT;

ERR_ACN_ENCODE_PACKET:CONSTANT INTEGER := 158; 
ERR_ACN_ENCODE_PACKET_P_HEADER:CONSTANT INTEGER := 102; 
ERR_ACN_ENCODE_PACKET_P_HEADER_VERSION:CONSTANT INTEGER := 74; 
ERR_ACN_ENCODE_PACKET_P_HEADER_RELEASE:CONSTANT INTEGER := 81; 
ERR_ACN_ENCODE_PACKET_P_HEADER_VARSIZEARRAY:CONSTANT INTEGER := 95; 
ERR_ACN_ENCODE_PACKET_P_HEADER_VARSIZEARRAY_ELM:CONSTANT INTEGER := 88; 
ERR_ACN_ENCODE_PACKET_BODY_LENGTH_IN_BYTES:CONSTANT INTEGER := 111; 
ERR_ACN_ENCODE_PACKET_P_BODY:CONSTANT INTEGER := 144; 
ERR_ACN_ENCODE_PACKET_P_BODY_AREAL:CONSTANT INTEGER := 116; 
ERR_ACN_ENCODE_PACKET_P_BODY_ANINTEGER:CONSTANT INTEGER := 123; 
ERR_ACN_ENCODE_PACKET_P_BODY_ANOTHERSIZEARRAY:CONSTANT INTEGER := 137; 
ERR_ACN_ENCODE_PACKET_P_BODY_ANOTHERSIZEARRAY_ELM:CONSTANT INTEGER := 130; 
ERR_ACN_ENCODE_PACKET_PACKET_CRC32:CONSTANT INTEGER := 153; 
Packet_REQUIRED_BYTES_FOR_ACN_ENCODING:CONSTANT INTEGER := 122;
Packet_REQUIRED_BITS_FOR_ACN_ENCODING:CONSTANT INTEGER := 976;

subtype Packet_ACN_Stream is adaasn1rtl.encoding.Bitstream(Packet_REQUIRED_BYTES_FOR_ACN_ENCODING);

procedure Packet_ACN_Encode(val:in Packet; Stream : out Packet_ACN_Stream; result : OUT adaasn1rtl.ASN1_RESULT);

ERR_ACN_DECODE_PACKET:CONSTANT INTEGER := 159; 
ERR_ACN_DECODE_PACKET_P_HEADER:CONSTANT INTEGER := 103; 
ERR_ACN_DECODE_PACKET_P_HEADER_VERSION:CONSTANT INTEGER := 75; 
ERR_ACN_DECODE_PACKET_P_HEADER_RELEASE:CONSTANT INTEGER := 82; 
ERR_ACN_DECODE_PACKET_P_HEADER_VARSIZEARRAY:CONSTANT INTEGER := 96; 
ERR_ACN_DECODE_PACKET_P_HEADER_VARSIZEARRAY_ELM:CONSTANT INTEGER := 89; 
ERR_ACN_DECODE_PACKET_BODY_LENGTH_IN_BYTES:CONSTANT INTEGER := 112; 
ERR_ACN_DECODE_PACKET_P_BODY:CONSTANT INTEGER := 145; 
ERR_ACN_DECODE_PACKET_P_BODY_AREAL:CONSTANT INTEGER := 117; 
ERR_ACN_DECODE_PACKET_P_BODY_ANINTEGER:CONSTANT INTEGER := 124; 
ERR_ACN_DECODE_PACKET_P_BODY_ANOTHERSIZEARRAY:CONSTANT INTEGER := 138; 
ERR_ACN_DECODE_PACKET_P_BODY_ANOTHERSIZEARRAY_ELM:CONSTANT INTEGER := 131; 
ERR_ACN_DECODE_PACKET_PACKET_CRC32:CONSTANT INTEGER := 154; 
procedure Packet_ACN_Decode(val: out Packet; Stream : in out Packet_ACN_Stream; result : OUT adaasn1rtl.ASN1_RESULT);

 

private
   --# hide MYMODULE;


END MYMODULE;